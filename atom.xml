<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Onion&#39;blog</title>
  <subtitle>write once, use anywhere</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-26T06:57:32.369Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>onion</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java多线程核心技术学习笔记（三）</title>
    <link href="http://yoursite.com/2018/06/26/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2018/06/26/Java多线程核心技术学习笔记（三）/</id>
    <published>2018-06-26T02:52:07.000Z</published>
    <updated>2018-06-26T06:57:32.369Z</updated>
    
    <content type="html"><![CDATA[<p>Java Multi-thread Programming学习笔记（三）<br><a id="more"></a></p>
<p>相关代码：<a href="https://github.com/clown14/learnThread/tree/master/chapter3/src/main/java" target="_blank" rel="external">https://github.com/clown14/learnThread/tree/master/chapter3/src/main/java</a></p>
<h1 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h1><p>线程是操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体。线程间的通信就是成为整体的比用方案之一，可以说，使线程间进行通信后，系统之间的交互性会更强大，在大大提高CPU利用率的同时还会使程序员对各线程任务在处理的过程中进行有效的把握与监督。 </p>
<h2 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h2><h3 id="等待-通知机制的实现"><a href="#等待-通知机制的实现" class="headerlink" title="等待/通知机制的实现"></a>等待/通知机制的实现</h3><p>wait()的作用是使当前执行代码的线程进行等待，直到接到通知或被中断。在调用wait()之前，线程必须获得该对象的对象级别锁，即只能在同步方法或同步块中调用wait()方法。notify()也要在同步方法或同步块中调用，如果有多个线程等待，则由线程规划器随机挑选出其中一个呈wait状态的线程，对其发出通知notify。在执行notify()后，当前线程不会马上释放该对象锁，呈wait()状态的线程也不能马上获取该对象锁，要等到notify()的线程将程序执行完，也就是退出synchronized代码块后才会释放锁。</p>
<p>简单来讲，wait使线程停止运行，notify使停止的线程继续运行。 </p>
<p>Synchronized可以将任何一个Object对象作为同步对象看待，而Java为每个Object都实现了wait()和notify()方法，它们必须用在被synchronized同步的Object的临界区内。<br>Wait()可以使调用该方法的线程释放共享资源的锁，然后从运行状态退出，进入等待队列，直到被再次唤醒。Notify()可以随机唤醒等待队列中等待同一共享资源的“一个”线程，并使该线程退出等待队列，进入可运行状态。notigyAll方法可以使所以正在等待队列中等待同一共享资源的“全部”线程从等待状态退出，进入可运行状态。</p>
<p><img src="/img/线程状态图.png" alt="图片名称" title=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String newString = <span class="keyword">new</span> String(<span class="string">""</span>);</div><div class="line">            newString.wait();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后抛出异常，原因是没有“对象监视器”，也就是没有同步加锁。</p>
<h3 id="方法wait-锁释放与notify-锁不释放-中断"><a href="#方法wait-锁释放与notify-锁不释放-中断" class="headerlink" title="方法wait()锁释放与notify()锁不释放 中断"></a>方法wait()锁释放与notify()锁不释放 中断</h3><p>当wait()被执行后，锁被自动释放，但执行完notify()方法，锁却不自动释放。 部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">(Object lock)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">                System.out.println(<span class="string">"begin wait() ThreadName="</span> +</div><div class="line">                        Thread.currentThread().getName());</div><div class="line">                lock.wait();</div><div class="line">                System.out.println(<span class="string">"  end wait() ThreadNmae="</span> +</div><div class="line">                        Thread.currentThread().getName());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synNotifyMethod</span><span class="params">(Object lock)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">                System.out.println(<span class="string">"begin notify() ThreadName="</span> +</div><div class="line">                        Thread.currentThread().getName() + <span class="string">" time="</span> +</div><div class="line">                        System.currentTimeMillis());</div><div class="line">                lock.notify();</div><div class="line">                Thread.sleep(<span class="number">5000</span>);</div><div class="line">                System.out.println(<span class="string">"  end notify() ThreadNmae="</span> +</div><div class="line">                        Thread.currentThread().getName() + <span class="string">" time="</span> +</div><div class="line">                        System.currentTimeMillis());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Object lock = <span class="keyword">new</span> Object();</div><div class="line">        ThreadA a = <span class="keyword">new</span> ThreadA(lock);</div><div class="line">        a.start();</div><div class="line">        NotifyThread nofityThread = <span class="keyword">new</span> NotifyThread(lock);</div><div class="line">        nofityThread.start();</div><div class="line">        synNotifyMethodThread c = <span class="keyword">new</span> synNotifyMethodThread(lock);</div><div class="line">        c.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有结果可知必须执行完notify()方法所在的同步synchronized代码块后才释放锁。</p>
<h3 id="当interrupt方法遇到wait方法"><a href="#当interrupt方法遇到wait方法" class="headerlink" title="当interrupt方法遇到wait方法"></a>当interrupt方法遇到wait方法</h3><p>当线程呈wait()状态时，调用线程对象的interrupt()方法会出现InterruptedException异常。</p>
<p>1） 执行完同步代码块就会释放对象的锁<br>2） 在执行同步代码块的过程中，遇到异常而导致线程终止，锁也会被释放。<br>3） 在执行同步代码块的过程中，执行了锁所属对象的wait()方法，这个线程会释放对象锁，而此线程对象会进入线程等待池中，等待被唤醒。</p>
<h3 id="只通知一个线程"><a href="#只通知一个线程" class="headerlink" title="只通知一个线程"></a>只通知一个线程</h3><p>调用notify()一次只随机通知一个线程进行唤醒。</p>
<h3 id="唤醒所以线程"><a href="#唤醒所以线程" class="headerlink" title="唤醒所以线程"></a>唤醒所以线程</h3><p>使用notifyAll()方法可以唤醒全部线程。</p>
<h3 id="方法wait-long-的使用"><a href="#方法wait-long-的使用" class="headerlink" title="方法wait(long)的使用"></a>方法wait(long)的使用</h3><p>带一个参数的wait(long)方法的功能时等待某一时间内是否有线程对锁进行唤醒，如果超过时间则自动唤醒，当然也可以在时间内由其他线程进行唤醒。     </p>
<h3 id="通知过早"><a href="#通知过早" class="headerlink" title="通知过早"></a>通知过早</h3><p>如果通知过早，则会打乱程序正常的运行逻辑。如果先通知了，则wait方法也就没有必要执行了。</p>
<h3 id="等待wait的条件发生变化"><a href="#等待wait的条件发生变化" class="headerlink" title="等待wait的条件发生变化"></a>等待wait的条件发生变化</h3><p>在使用wait/notify模式时，还需要注意另外一种情况，也就是wait等待的条件发生了变化，也容易造成程序逻辑的混乱。 部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Add</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String lock;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Add</span><span class="params">(String lock)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.lock = lock;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">            ValueObject.list.add(<span class="string">"anyString"</span>);</div><div class="line">            lock.notifyAll();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subtract</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String lock;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Subtract</span><span class="params">(String lock)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.lock = lock;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subtract</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">                <span class="keyword">while</span> (ValueObject.list.size() == <span class="number">0</span>) &#123;</div><div class="line">                    System.out.println(<span class="string">"wait begin ThreadName="</span> +</div><div class="line">                            Thread.currentThread().getName());</div><div class="line">                    lock.wait();</div><div class="line">                    System.out.println(<span class="string">"wait and ThreadNmae="</span> +</div><div class="line">                            Thread.currentThread().getName());</div><div class="line">                &#125;</div><div class="line">                ValueObject.list.remove(<span class="number">0</span>);</div><div class="line">                System.out.println(<span class="string">"list size="</span> + ValueObject.list.size());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueObject</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List list = <span class="keyword">new</span> ArrayList();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        String lock = <span class="keyword">new</span> String(<span class="string">""</span>);</div><div class="line">        Add add = <span class="keyword">new</span> Add(lock);</div><div class="line">        Subtract subtract = <span class="keyword">new</span> Subtract(lock);</div><div class="line">        ThreadSubtract subtract1Thread = <span class="keyword">new</span> ThreadSubtract(subtract);</div><div class="line">        subtract1Thread.setName(<span class="string">"subtract1Thread"</span>);</div><div class="line">        subtract1Thread.start();</div><div class="line">        ThreadSubtract subtract2Thread = <span class="keyword">new</span> ThreadSubtract(subtract);</div><div class="line">        subtract2Thread.setName(<span class="string">"subtract2Thread"</span>);</div><div class="line">        subtract2Thread.start();</div><div class="line">        Thread.sleep(<span class="number">1000</span>);</div><div class="line">        ThreadAdd addThread = <span class="keyword">new</span> ThreadAdd(add);</div><div class="line">        addThread.setName(<span class="string">"addThread"</span>);</div><div class="line">        addThread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后出现异常，原因是有两个实现remove()操作的线程，第一个实现减操作的线程能正确地删除List中索引为0的数据，但第二个则出现索引溢出的异常。</p>
<p>解决办法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subtract</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String lock;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Subtract</span><span class="params">(String lock)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.lock = lock;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subtract</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">                <span class="keyword">while</span> (ValueObject.list.size() == <span class="number">0</span>) &#123;</div><div class="line">                    System.out.println(<span class="string">"wait begin ThreadName="</span> +</div><div class="line">                            Thread.currentThread().getName());</div><div class="line">                    lock.wait();</div><div class="line">                    System.out.println(<span class="string">"wait and ThreadNmae="</span> +</div><div class="line">                            Thread.currentThread().getName());</div><div class="line">                &#125;</div><div class="line">                ValueObject.list.remove(<span class="number">0</span>);</div><div class="line">                System.out.println(<span class="string">"list size="</span> + ValueObject.list.size());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生产者-消费者模式实现"><a href="#生产者-消费者模式实现" class="headerlink" title="生产者/消费者模式实现"></a>生产者/消费者模式实现</h3><p>等待/通知模式最经典的案例就是“生产者/消费者”模式。</p>
<p>“假死”的现象其实就是线程进入WAITING等待状态。如果全部线程都进入WAITING状态，则程序就不再执行任何业务功能了，整个项目呈停止状态。</p>
<h3 id="通过管道进行线程间通信：字节流"><a href="#通过管道进行线程间通信：字节流" class="headerlink" title="通过管道进行线程间通信：字节流"></a>通过管道进行线程间通信：字节流</h3><p>JAVA中由各种各样的输入/输出流Stream，其中管道流（pipeStream)是一种特殊的流，用于在不同线程间直接传送数据。一个线程发送数据到输出管道，另一个线程从输入管道中读数据。</p>
<p>JAVA中提供4各类来使线程间进行通信：<br>1） PipedInputStream和PipedOutputStream<br>2） PipedReader和PipedWriter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadData</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readMethod</span><span class="params">(PipedInputStream input)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"read :"</span>);</div><div class="line">            <span class="keyword">byte</span>[] byteArray = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</div><div class="line">            <span class="keyword">int</span> readLength = input.read(byteArray);</div><div class="line">            <span class="keyword">while</span> (readLength != -<span class="number">1</span>) &#123;</div><div class="line">                String newData = <span class="keyword">new</span> String(byteArray, <span class="number">0</span>, readLength);</div><div class="line">                System.out.println(newData);</div><div class="line">                readLength = input.read(byteArray);</div><div class="line">            &#125;</div><div class="line">            System.out.println();</div><div class="line">            input.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteData</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeMethod</span><span class="params">(PipedOutputStream out)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"write :"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">300</span>; i++) &#123;</div><div class="line">                String outData = <span class="string">""</span> + (i + i);</div><div class="line">                out.write(outData.getBytes());</div><div class="line">                System.out.println(outData);</div><div class="line">            &#125;</div><div class="line">            System.out.println();</div><div class="line">            out.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            WriteData writeData = <span class="keyword">new</span> WriteData();</div><div class="line">            ReadData readData = <span class="keyword">new</span> ReadData();</div><div class="line">            PipedInputStream inputStream = <span class="keyword">new</span> PipedInputStream();</div><div class="line">            PipedOutputStream outputStream = <span class="keyword">new</span> PipedOutputStream();</div><div class="line"></div><div class="line">            inputStream.connect(outputStream);</div><div class="line">            outputStream.connect(inputStream);</div><div class="line"></div><div class="line">            ThreadRead threadRead = <span class="keyword">new</span> ThreadRead(readData, inputStream);</div><div class="line">            threadRead.start();</div><div class="line"></div><div class="line">            Thread.sleep(<span class="number">2000</span>);</div><div class="line"></div><div class="line">            ThreadWrite threadWrite = <span class="keyword">new</span> ThreadWrite(writeData, outputStream);</div><div class="line">            threadRead.start();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用inputStream.connect(outputStream)或outputStream.connect(inputStream)的作用使两个Stream之间产生通信链接，这样才可以将数据进行输出和输入。</p>
<h3 id="通过管道进行线程间通信：字符流"><a href="#通过管道进行线程间通信：字符流" class="headerlink" title="通过管道进行线程间通信：字符流"></a>通过管道进行线程间通信：字符流</h3><p>当然，在管道中还可以传递字符流。</p>
<h2 id="方法join的使用"><a href="#方法join的使用" class="headerlink" title="方法join的使用"></a>方法join的使用</h2><p>在很多情况下，主线程创建并启动子线程，如果子线程中要进行大量的耗时运算，主线程往往将早于子线程结束之前结束。这是，如果主线程想等待子线程执行完成之后再结束，比如子线程处理一个数据，主线程要取得这个数据中的值，就要用到join()方法了。Join()的作用使等待线程对象销毁。</p>
<p>方法join的作用是使所属的线程对象x正常执行run()方法中的任务，而使当前线程z进行无期限的阻塞，等待线程x销毁后再继续执行线程z后面的代码。Join由使线程排队运行的作用，有些类似同步的运行效果。Join与synchronized的区别是：join在内部使用wait()方法进行等待，而synchronized关键字使用的是“对象监视器”原理做为同步。</p>
<h3 id="方法join与异常"><a href="#方法join与异常" class="headerlink" title="方法join与异常"></a>方法join与异常</h3><p>在join过程中，如果当前线程对象被中断，则当前线程出现异常。Join()与interrupt()方法如果彼此遇到，则会出现异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">            String newString = <span class="keyword">new</span> String();</div><div class="line">            Math.random();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ThreadA a = <span class="keyword">new</span> ThreadA();</div><div class="line">            a.start();</div><div class="line">            a.join();</div><div class="line">            System.out.println(<span class="string">"线程B在run end处打印了"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadC</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ThreadB threadB;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        threadB.interrupt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadC</span><span class="params">(ThreadB threadB)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.threadB = threadB;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ThreadB b = <span class="keyword">new</span> ThreadB();</div><div class="line">            b.start();</div><div class="line">            Thread.sleep(<span class="number">500</span>);</div><div class="line">            ThreadC c = <span class="keyword">new</span> ThreadC(b);</div><div class="line">            c.start();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法join-long-的使用"><a href="#方法join-long-的使用" class="headerlink" title="方法join(long)的使用"></a>方法join(long)的使用</h3><p>Join(long)中的参数是设定等待的时间。</p>
<h3 id="方法join-long-与sleep-long-的区别"><a href="#方法join-long-与sleep-long-的区别" class="headerlink" title="方法join(long)与sleep(long)的区别"></a>方法join(long)与sleep(long)的区别</h3><p>Join(long)的功能在内部是使用wait(long)方法来实现的，所以join(long)方法具有释放锁的特定。而Thread.sleep(long)方法却不释放锁。</p>
<h2 id="类ThreadLocal的使用"><a href="#类ThreadLocal的使用" class="headerlink" title="类ThreadLocal的使用"></a>类ThreadLocal的使用</h2><p>变量值的共享可以使用public static变量的形式，所以的线程都使用同一个public static变量。JDK中提供的ThreadLocal实现了每一个线程都有自己的共享变量，可以将ThreadLocal类比喻成全局存放数据的盒子，盒子中可以存储每个线程的私有数据。</p>
<h3 id="方法get-与null"><a href="#方法get-与null" class="headerlink" title="方法get()与null"></a>方法get()与null</h3><p>类Threadlocal解决的是变量在不同线程间的隔离性，也就是不同线程拥有自己的值，不同线程中的值是可以放入Threadlocal类中进行保存的。</p>
<h2 id="类InheritableThreadLocal的使用"><a href="#类InheritableThreadLocal的使用" class="headerlink" title="类InheritableThreadLocal的使用"></a>类InheritableThreadLocal的使用</h2><p>使用类InheritableThreadLocal可以在子线程中取得父线程继承下来的值。需要注意的是如果子线程在取得值的同时，主线程将InheritableThreadLocal中的值进行更改，那么子线程取到的值还是旧值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java Multi-thread Programming学习笔记（三）&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程核心技术学习笔记（二）</title>
    <link href="http://yoursite.com/2018/06/19/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/06/19/Java多线程核心技术学习笔记（二）/</id>
    <published>2018-06-19T07:26:56.000Z</published>
    <updated>2018-06-21T08:23:10.215Z</updated>
    
    <content type="html"><![CDATA[<p>Java Multi-thread Programming学习笔记（一）<br><a id="more"></a></p>
<p>相关代码：<a href="https://github.com/clown14/learnThread/tree/master/chapter2/src" target="_blank" rel="external">https://github.com/clown14/learnThread/tree/master/chapter2/src</a></p>
<h1 id="对象及变量的并发访问"><a href="#对象及变量的并发访问" class="headerlink" title="对象及变量的并发访问"></a>对象及变量的并发访问</h1><h2 id="Synchronized同步方法"><a href="#Synchronized同步方法" class="headerlink" title="Synchronized同步方法"></a>Synchronized同步方法</h2><h3 id="方法内的变量为线程安全"><a href="#方法内的变量为线程安全" class="headerlink" title="方法内的变量为线程安全 :"></a>方法内的变量为线程安全 :</h3><p>“非线程安全”问题存在于“实例变量”中，如果是方法内部的私有变量，则不存在“非线程安全”问题。</p>
<h3 id="实例变量非线程安全-："><a href="#实例变量非线程安全-：" class="headerlink" title="实例变量非线程安全 ："></a>实例变量非线程安全 ：</h3><p>如果多个线程共同访问1个对象中的实例变量，则有可能出现“非线程安全”问题。用线程访问的对象中如果有多个实例变量，则运行的结果有可能出现交叉的情况。部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HasSelfPrivateNum</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addI</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (username.equals(<span class="string">"a"</span>)) &#123;</div><div class="line">                num = <span class="number">100</span>;</div><div class="line">                System.out.println(<span class="string">"a set over!"</span>);</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                num = <span class="number">200</span>;</div><div class="line">                System.out.println(<span class="string">"b set over!"</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println(username + <span class="string">" num="</span> + num);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        HasSelfPrivateNum numRef = <span class="keyword">new</span> HasSelfPrivateNum();</div><div class="line">        ThreadA athread = <span class="keyword">new</span> ThreadA(numRef);</div><div class="line">        athread.start();</div><div class="line">        ThreadB bthread = <span class="keyword">new</span> ThreadB(numRef);</div><div class="line">        bthread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果中a的值为200，只需在addI方法前添加synchronized即可保证线程安全。</p>
<h3 id="多个对象多个锁"><a href="#多个对象多个锁" class="headerlink" title="多个对象多个锁"></a>多个对象多个锁</h3><p>部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HasSelfPrivateNum</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addI</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (username.equals(<span class="string">"a"</span>)) &#123;</div><div class="line">                num = <span class="number">100</span>;</div><div class="line">                System.out.println(<span class="string">"a set over!"</span>);</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                num = <span class="number">200</span>;</div><div class="line">                System.out.println(<span class="string">"b set over!"</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println(username + <span class="string">" num="</span> + num);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        HasSelfPrivateNum numRef1 = <span class="keyword">new</span> HasSelfPrivateNum();</div><div class="line">        HasSelfPrivateNum numRef2 = <span class="keyword">new</span> HasSelfPrivateNum();</div><div class="line">        ThreadA athread = <span class="keyword">new</span> ThreadA(numRef1);</div><div class="line">        athread.start();</div><div class="line">        ThreadB bthread = <span class="keyword">new</span> ThreadB(numRef2);</div><div class="line">        bthread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从结果看发现是异步进行。因为关键字synchronized取得的锁都是对象锁，而不是把一段代码或方法（函数）当作锁，哪个线程先执行带synchronized关键字的方法，哪个线程就持有该方法所属对象的锁Lock，那么其他线程只能呈等待状态，前提是多个线程访问的时同一个对象。 如果多个线程访问多个对象，则JVM会创建多个锁。</p>
<h3 id="synchronized方法与锁对象"><a href="#synchronized方法与锁对象" class="headerlink" title="synchronized方法与锁对象"></a>synchronized方法与锁对象</h3><p>调用用synchronized声明的方法一定是排队运行的。另外只有共享资源的读写访问才需要同步化。</p>
<p>1） A线程先持有object对象的Lock锁，B线程可以以异步的方式调用object对象中的非synchronized类型的方法。</p>
<p>2） A线程先持有object对象的Lock锁，B线程如果在这时调用object对象中的synchronized类型的方法则需等待，也就是同步。</p>
<h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>已经实现多个线程调用同一个方法时，为了避免数据出现交叉的情况，可以使用synchronized关键字来进行同步。虽然在赋值时出现了同步，但在取值时有可能出现一些意想不到的意外，这种情况就是脏读（dirtyRead)。发生脏读的情况是在读取实例变量时，此值已经被其他线程更改过了。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublicVar</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String username = <span class="string">"A"</span>;</div><div class="line">    <span class="keyword">public</span> String password = <span class="string">"AA"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">this</span>.username = username;</div><div class="line">            Thread.sleep(<span class="number">5000</span>);</div><div class="line">            <span class="keyword">this</span>.password = password;</div><div class="line">            System.out.println(<span class="string">"setValue method thread name="</span> +</div><div class="line">                    Thread.currentThread().getName() + <span class="string">" username="</span> +</div><div class="line">                    username + <span class="string">" password="</span> +</div><div class="line">                    password);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getValue</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"getValue method thread name="</span> +</div><div class="line">                Thread.currentThread().getName() + <span class="string">" username="</span> +</div><div class="line">                username + <span class="string">" password="</span> +</div><div class="line">                password);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> PublicVar publicVar;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(PublicVar publicVar)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.publicVar = publicVar;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        publicVar.setValue(<span class="string">"B"</span>,<span class="string">"BB"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            PublicVar publicVarRef = <span class="keyword">new</span> PublicVar();</div><div class="line">            ThreadA thread = <span class="keyword">new</span> ThreadA(publicVarRef);</div><div class="line">            thread.start();</div><div class="line">            Thread.sleep(<span class="number">200</span>);<span class="comment">//打印结果受此值大小影响</span></div><div class="line">            publicVarRef.getValue();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果中main中username为B，解决办法只需在getValue方法前加上synchronized。</p>
<p>当A线程调用anyObject对象加入synchronized关键字的X方法时，A线程就获得了X方法锁，更准确地讲，是获得了对象的锁，其他线程必须等A线程执行完毕才可以调用X方法，但B线程可以随意调用其他的非synchronized同步方法。而B线程如果调用了声明了synchronized关键字的非X方法时，必须等A线程将X方法执行完，也就是释放对象锁后才可以调用。 </p>
<h3 id="synchronized锁重入"><a href="#synchronized锁重入" class="headerlink" title="synchronized锁重入"></a>synchronized锁重入</h3><p>在使用synchronized时，当一个线程得到一个对象锁后，再次请求此对象锁时是可以再次得到该对象的锁的。也证明在一个synchronized方法/块的内部调用本类的其他synchronized方法/块时，是永远可以得到锁的。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"service1"</span>);</div><div class="line">        service2();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"service2"</span>);</div><div class="line">        service3();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service3</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"service3"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        Service service = <span class="keyword">new</span> Service();</div><div class="line">        service.service1();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MyThread t = <span class="keyword">new</span> MyThread();</div><div class="line">        t.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果可以看到service1,2,3依次输出，如果不可锁重入，就会造成死锁。</p>
<p>可重入锁也支持在父子类继承的环境中。子类完全可以通过“可重入锁”调用父类的同步方法。 </p>
<h3 id="出现异常，锁自动释放"><a href="#出现异常，锁自动释放" class="headerlink" title="出现异常，锁自动释放"></a>出现异常，锁自动释放</h3><p>当一个线程执行的代码出现异常时，其所持有的锁会自动释放 </p>
<h3 id="同步不具有继承性"><a href="#同步不具有继承性" class="headerlink" title="同步不具有继承性"></a>同步不具有继承性</h3><p>同步不可以继承。 </p>
<h2 id="synchronized同步语句块"><a href="#synchronized同步语句块" class="headerlink" title="synchronized同步语句块"></a>synchronized同步语句块</h2><p>用synchronized声明方法在某些情况下是由弊端的，比如A线程调用同步方法执行一个长时间的任务，那么B线程则必须等等比较长时间。在这样的情况下可以使用synchronized同步语句块来解决。</p>
<h3 id="synchronized同步代码块的使用"><a href="#synchronized同步代码块的使用" class="headerlink" title="synchronized同步代码块的使用"></a>synchronized同步代码块的使用</h3><p>当两个并发线程访问同一个对象object中的synchronized(this)同步代码块时，一段时间内只能由一个线程被执行，另一个线程必须等等当前线程执行完这个代码块以后才能执行该代码块。 </p>
<p>部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"begin time="</span> + System.currentTimeMillis());</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">                System.out.println(<span class="string">"end   time="</span> + System.currentTimeMillis());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ObjectService service = <span class="keyword">new</span> ObjectService();</div><div class="line">        ThreadA a = <span class="keyword">new</span> ThreadA(service);</div><div class="line">        a.setName(<span class="string">"a"</span>);</div><div class="line">        a.start();</div><div class="line">        ThreadB b = <span class="keyword">new</span> ThreadB(service);</div><div class="line">        b.setName(<span class="string">"b"</span>);</div><div class="line">        b.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到虽然使用了synchronized同步代码块，但执行效率还是没有提高，还是同步运行。</p>
<h3 id="用同步代码块解决同步方法的弊端"><a href="#用同步代码块解决同步方法的弊端" class="headerlink" title="用同步代码块解决同步方法的弊端"></a>用同步代码块解决同步方法的弊端</h3><p>当一个线程访问对象的一个synchronized同步代码块时，另一个线程仍然可以访问该对象中的非synchronized(this)同步代码块。 </p>
<h3 id="一半异步，一半同步"><a href="#一半异步，一半同步" class="headerlink" title="一半异步，一半同步"></a>一半异步，一半同步</h3><p>不在synchronized块中就是异步执行，在synchronized块中就是同步执行。部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLongTimeTask</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>;i++) &#123;</div><div class="line">            System.out.println(<span class="string">"nosynchronized threadName="</span> +</div><div class="line">                    Thread.currentThread().getName() + <span class="string">" i="</span> + (i + i));</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">""</span>);</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>;i++) &#123;</div><div class="line">                System.out.println(<span class="string">"synchronized threadName="</span> +</div><div class="line">                        Thread.currentThread().getName() + <span class="string">" i="</span> + (i + i));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Task task = <span class="keyword">new</span> Task();</div><div class="line">        MyThread1 thread1 = <span class="keyword">new</span> MyThread1(task);</div><div class="line">        thread1.start();</div><div class="line">        MyThread2 thread2 = <span class="keyword">new</span> MyThread2(task);</div><div class="line">        thread2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到进入synchronized代码块后则排队执行。</p>
<h3 id="synchronized代码块间的同步性"><a href="#synchronized代码块间的同步性" class="headerlink" title="synchronized代码块间的同步性"></a>synchronized代码块间的同步性</h3><p>当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对同一个object中所有其他synchronized(this)同步代码块的访问将被阻塞，这说明synchronized使用的“对象监视器”是一个。 部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceMethodA</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"A begin time="</span> + System.currentTimeMillis());</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">                System.out.println(<span class="string">"A end   time="</span> + System.currentTimeMillis());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceMethodB</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"B begin time="</span> + System.currentTimeMillis());</div><div class="line">            System.out.println(<span class="string">"B end   time="</span> + System.currentTimeMillis());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ObjectService service = <span class="keyword">new</span> ObjectService();</div><div class="line">        ThreadA a = <span class="keyword">new</span> ThreadA(service);</div><div class="line">        a.setName(<span class="string">"a"</span>);</div><div class="line">        a.start();</div><div class="line">        ThreadB b = <span class="keyword">new</span> ThreadB(service);</div><div class="line">        b.setName(<span class="string">"b"</span>);</div><div class="line">        b.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="同步synchronized-this-代码块时锁定当前对象的"><a href="#同步synchronized-this-代码块时锁定当前对象的" class="headerlink" title="同步synchronized(this)代码块时锁定当前对象的"></a>同步synchronized(this)代码块时锁定当前对象的</h3><p>和synchronized方法一样，synchronized(this)代码块也是锁定当前对象的。 </p>
<h3 id="将任意对象作为对象监视器"><a href="#将任意对象作为对象监视器" class="headerlink" title="将任意对象作为对象监视器"></a>将任意对象作为对象监视器</h3><p>（1）synchronized同步方法</p>
<p>1）对其他synchronized同步方法或synchronized(this)同步代码块调用呈阻塞状态。<br>2）同一时间只有一个线程可以执行synchronized同步方法中的代码。</p>
<p>（2）synchronized(this)同步代码块</p>
<p>1）对其他synchronized同步方法或synchronized(this)同步代码块调用呈阻塞状态。<br>2）同一时间只有一个线程可以执行synchronized(this)同步代码块中的代码。</p>
<p>Synchronized(非this对象)格式的作用只有1种：synchronized(非this对象x)同步代码块。</p>
<p>1） 在多个线程持有“对象监视器”为同一个对象的前提下，同一时间只有一个线程可以执行synchronized(非this对象x)同步代码块中的代码。<br>2） 当持有“对象监视器”为同一个对象的前提下，同一时间只有一个线程可以执行synchronized(非this对象x)同步代码块中的代码。</p>
<p>部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String usernameParam;</div><div class="line">    <span class="keyword">private</span> String passwordParam;</div><div class="line">    <span class="comment">//private String anyString = new String();</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsernamePassword</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String anyString = <span class="keyword">new</span> String();</div><div class="line">            <span class="keyword">synchronized</span> (anyString) &#123;</div><div class="line">                System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                        + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入同步块"</span>);</div><div class="line">                usernameParam = username;</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">                passwordParam = password;</div><div class="line">                System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName()</div><div class="line">                        + <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开同步块"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Service service = <span class="keyword">new</span> Service();</div><div class="line">        ThreadA a = <span class="keyword">new</span> ThreadA(service);</div><div class="line">        a.setName(<span class="string">"A"</span>);</div><div class="line">        a.start();</div><div class="line">        ThreadB b = <span class="keyword">new</span> ThreadB(service);</div><div class="line">        b.setName(<span class="string">"B"</span>);</div><div class="line">        b.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由结果可见，使用“synchronized(非this对象x)同步代码块”格式进行同步操作时，对象监视器必须是同一个对象。如果不是同一个对象监视器，运行结果就是异步调用了，就会交叉运行。</p>
<p>锁非this对象具有一定的优点：如果在一个类中由很多个synchronized方法，这时虽然能实现同步，但会受到阻塞，所以影响运行效率；但如果使用同步代码块锁非this对象，则synchronized(非this)代码块中的程序与同步方法是异步的，不与其他锁this同步方法争抢this锁，则可大大提高运行效率。 </p>
<p>同步代码块放在非同步synchronized方法中进行声明，并不能保证调用方法的线程的执行同步/顺序性，也就是线程调用方法的顺序是无序的，虽然在同步块中执行的顺序是同步的，这样极易出现“脏读”问题。 部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOneList</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List list = <span class="keyword">new</span> ArrayList();</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String data)</span> </span>&#123;</div><div class="line">        list.add(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> MyOneList <span class="title">addServiceMethod</span><span class="params">(MyOneList list, String data)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">         	<span class="keyword">if</span> (list.getSize() &lt; <span class="number">1</span>) &#123;</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">                list.add(data);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MyOneList list;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        MyService msRef = <span class="keyword">new</span> MyService();</div><div class="line">        msRef.addServiceMethod(list, <span class="string">"A"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread1</span><span class="params">(MyOneList list)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MyOneList list;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread2</span><span class="params">(MyOneList list)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        MyService msRef = <span class="keyword">new</span> MyService();</div><div class="line">        msRef.addServiceMethod(list, <span class="string">"B"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        MyOneList list = <span class="keyword">new</span> MyOneList();</div><div class="line">        MyThread1 thread1 = <span class="keyword">new</span> MyThread1(list);</div><div class="line">        thread1.setName(<span class="string">"A"</span>);</div><div class="line">        thread1.start();</div><div class="line">        MyThread2 thread2 = <span class="keyword">new</span> MyThread2(list);</div><div class="line">        thread2.setName(<span class="string">"B"</span>);</div><div class="line">        thread2.start();</div><div class="line">        Thread.sleep(<span class="number">6000</span>);</div><div class="line">        System.out.println(<span class="string">"listSize="</span> + list.getSize());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后发现“脏读”出现了，原因是两个线程以异步的方式返回list参数的size()大小。解决办法就是“同步化”。</p>
<h3 id="细化验证3个结论"><a href="#细化验证3个结论" class="headerlink" title="细化验证3个结论"></a>细化验证3个结论</h3><p>“synchronized(非this对象x)”格式的写法是将x对象本身作为“对象监视器”，这样就可以得出以下3个结论：</p>
<p>1） 当多个线程同时执行synchronized(x){}同步代码块时呈同步效果。原因是使用了同一个“对象监视器”，如果使用不同“对象监视器”就会异步交叉运行。<br>2） 当其他线程执行x对象中synchronized同步方法时呈同步效果。<br>3） 当其他线程执行x对象方法里面的synchronized(this)代码块时也呈现同步效果。</p>
<h3 id="静态同步synchronized方法与synchronized-class-代码块"><a href="#静态同步synchronized方法与synchronized-class-代码块" class="headerlink" title="静态同步synchronized方法与synchronized(class)代码块"></a>静态同步synchronized方法与synchronized(class)代码块</h3><p>Synchronized还可以应用在static静态方法上，如果这样写，那是对当前的*.java文件对应 的Class类进行持锁。<br>Synchronized加到static静态方法上时给Class类上锁，而synchronized关键字加到非static静态方法上是给对象上锁。<br>Class锁可以对类的所以对象实例起作用。<br>同步synchronized(class)代码块的作用其实和synchronized static方法的作用一样。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName() +</div><div class="line">                    <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入printA"</span>);</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">            System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName() +</div><div class="line">                    <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开printA"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName() +</div><div class="line">                <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入printB"</span>);</div><div class="line">        System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName() +</div><div class="line">                <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开printB"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName() +</div><div class="line">                <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"进入printC"</span>);</div><div class="line">        System.out.println(<span class="string">"线程名称为："</span> + Thread.currentThread().getName() +</div><div class="line">                <span class="string">"在"</span> + System.currentTimeMillis() + <span class="string">"离开printC"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Service service = <span class="keyword">new</span> Service();</div><div class="line">        ThreadA a = <span class="keyword">new</span> ThreadA(service);</div><div class="line">        a.setName(<span class="string">"A"</span>);</div><div class="line">        a.start();</div><div class="line">        ThreadB b = <span class="keyword">new</span> ThreadB(service);</div><div class="line">        b.setName(<span class="string">"B"</span>);</div><div class="line">        b.start();</div><div class="line">        ThreadC c= <span class="keyword">new</span> ThreadC(service);</div><div class="line">        c.setName(<span class="string">"C"</span>);</div><div class="line">        c.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>异步的原因是持有不同的锁，一个是对象锁，另一个是Class锁，而Class锁可以对类的所以对象实例起作用。</p>
<h3 id="数据类型String的常量池特性"><a href="#数据类型String的常量池特性" class="headerlink" title="数据类型String的常量池特性"></a>数据类型String的常量池特性</h3><p>在JVM中具有String常量池缓存的功能，将synchronized(string)同步块与String联合使用时，要注意常量池以带来的一些例外。</p>
<h3 id="多线程的死锁"><a href="#多线程的死锁" class="headerlink" title="多线程的死锁"></a>多线程的死锁</h3><p>Java线程死锁是一个经典的多线程问题，因为不同的线程都在等等根本不可能被释放的锁，从而导致所以的任务都无法继续完成，死锁是程序设计的bug，再设计程序时就要避免双方互相持有对方的锁的情况。</p>
<h3 id="内置类与同步"><a href="#内置类与同步" class="headerlink" title="内置类与同步"></a>内置类与同步</h3><p>内置类中有两个同步方法，但使用的却是不同的锁，打印的结果也是异步的。 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutClass</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (<span class="string">"其他的锁"</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) &#123;</div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" i="</span> + i);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">100</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">11</span>; i&lt;=<span class="number">20</span> ;i++) &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" i="</span> + i);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">100</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于持有不同的“对象监视器”，所以打印结果就是乱序的。</p>
<h3 id="锁对象的改变"><a href="#锁对象的改变" class="headerlink" title="锁对象的改变"></a>锁对象的改变</h3><p>在将任何数据类型作为同步锁时，需要注意的是，是否有多个线程同时持有锁对象，如果同时持有相同的锁对象，则这些线程之间就是同步的；如果分别获得锁对象，这些线程之间就是异步的。<br>只要对象不变，即使对象的属性被改变，运行的结果还是同步。</p>
<h2 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h2><h3 id="关键字volatile与死循环"><a href="#关键字volatile与死循环" class="headerlink" title="关键字volatile与死循环"></a>关键字volatile与死循环</h3><p>如果不是在多继承的情况下，使用继承Thread类和实现Runnable接口在取得程序运行的结果上并没有什么太大的区别。如果一旦出现“多继承”，则用实现Runnable接口的方式来处理多线程的问题就是很有必要的。</p>
<h3 id="解决同步死循环"><a href="#解决同步死循环" class="headerlink" title="解决同步死循环"></a>解决同步死循环</h3><p>关键字volatile的作用是强制从公共堆栈中取得变量的值，而不是从线程私有数据栈中取得变量的值。</p>
<h3 id="解决异步死循环"><a href="#解决异步死循环" class="headerlink" title="解决异步死循环"></a>解决异步死循环</h3><p>使用volatile关键字增加了实例变量在多个线程之间的可见性。但volatile关键字最致命的缺点是不支持原子性。</p>
<p>Synchronized和volatile对比：</p>
<p>1） volatile是线程同步的轻量级实现，所以volatile性能肯定比synchronized要好，并且volatile只能修饰变量，而synchronized可以修饰方法，以及代码块。</p>
<p>2） 多线程访问volatile不会发生阻塞，而synchronized会出现阻塞。</p>
<p>3） Volatile能保证数据的可见性，但不能保证原子性；而synchronized可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公共内存中的数据做同步。</p>
<p>4） Volatile解决的是变量在多个线程之间的可见性；而synchronized关键字解决的是多个线程之间访问资源的同步性。</p>
<h3 id="volatile非原子的特性"><a href="#volatile非原子的特性" class="headerlink" title="volatile非原子的特性"></a>volatile非原子的特性</h3><p>Volatile虽然增加了实例变量再多个线程之间的可见性，但它却不具备同步性，那么也就不具备原子性。</p>
<p>Volatile主要使用的场合实在多个线程中可以感知实例变量被更改了，并且可以获得最新的值使用，也就是用多线程读取共享变量时可以获得最新值使用。</p>
<h3 id="synchronized代码块有volatile同步的功能"><a href="#synchronized代码块有volatile同步的功能" class="headerlink" title="synchronized代码块有volatile同步的功能"></a>synchronized代码块有volatile同步的功能</h3><p>Synchronized可以使多个线程访问同一个资源具有同步性，而且它还具有将线程工作内存中的私有变量与公共内存中的变量同步的功能。</p>
<p>Synchronized可以保证再同一时刻，只要一个线程可以执行某一个方法或某一个代码块。它包含两个特征：互斥性和可见性。同步synchronized不仅可以解决一个线程看到对象处于不一致的状态，还可以保证进入同步方法或者同步代码块的买个线程，都看到由一个锁保护之前所以的修改效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java Multi-thread Programming学习笔记（一）&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程核心技术学习笔记（一）</title>
    <link href="http://yoursite.com/2018/06/11/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/06/11/Java多线程核心技术学习笔记（一）/</id>
    <published>2018-06-11T08:51:54.000Z</published>
    <updated>2018-06-12T06:28:45.317Z</updated>
    
    <content type="html"><![CDATA[<p>Java Multi-thread Programming学习笔记（一）<br><a id="more"></a></p>
<p>相关代码：<a href="https://github.com/clown14/learnThread" target="_blank" rel="external">https://github.com/clown14/learnThread</a></p>
<h1 id="Java多线程技能"><a href="#Java多线程技能" class="headerlink" title="Java多线程技能"></a>Java多线程技能</h1><h2 id="进程和多线程的概念及线程的优点"><a href="#进程和多线程的概念及线程的优点" class="headerlink" title="进程和多线程的概念及线程的优点"></a>进程和多线程的概念及线程的优点</h2><p>通俗地讲，进程是一个正在操作系统中运行的exe程序，进程是受操作系统管理的基本运行单元。</p>
<p>线程可以理解成是在进程中独立运行的子任务。</p>
<p>使用多线程，可以在同一时间内运行更多不同种类的任务，可以最大限度地利用CPU 的空闲时间。</p>
<p><img src="/img/Thread1.png" alt="图片名称" title=""></p>
<h2 id="使用多线程"><a href="#使用多线程" class="headerlink" title="使用多线程"></a>使用多线程</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p>实现多线程的方式主要有两种，一是继承Thread类，二是实现Runnable接口。</p>
<p>Thread类结构：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div></pre></td></tr></table></figure>
<p>可以发现，Thread类实现了Runnable接口，它们之间是多态的关系。使用继承Thread类的方式局限在于不支持多继承，而实现Runnable接口支持多继承。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        System.out.println(<span class="string">"MyThread"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Run</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        MyThread mythread = <span class="keyword">new</span> MyThread();</div><div class="line">        mythread.start();</div><div class="line">        System.out.println(<span class="string">"运行结束！"</span>)；</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码运行结果先输出“运行结束！”，然后是“MyThread”，可见使用多线程时，代码的运行结果与代码执行顺序或调用顺序是无关的，即线程具有随机性。</p>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>当想创建的线程类已经有一个父类，就不能再继承自Thread类，需要实现Runnable接口 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"运行中！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Runnable runnable = <span class="keyword">new</span> MyRunnable();</div><div class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</div><div class="line">        thread.start();</div><div class="line">        System.out.println(<span class="string">"运行结束！"</span>)；</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实例变量与线程安全"><a href="#实例变量与线程安全" class="headerlink" title="实例变量与线程安全"></a>实例变量与线程安全</h3><p>自定义线程类中的实例变量针对其他线程可以有共享与不共享之分。共享数据就是多个线程可以访问同一变量。 </p>
<p>（1）不共享数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.setName(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</div><div class="line">            count--;</div><div class="line">            System.out.println(<span class="string">"由"</span> + <span class="keyword">this</span>.currentThread().getName() + <span class="string">"计算.count"</span> + count);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MyThread a = <span class="keyword">new</span> MyThread(<span class="string">"A"</span>);</div><div class="line">        MyThread b = <span class="keyword">new</span> MyThread(<span class="string">"B"</span>);</div><div class="line">        MyThread c = <span class="keyword">new</span> MyThread(<span class="string">"C"</span>);</div><div class="line">        a.start();</div><div class="line">        b.start();</div><div class="line">        c.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从运行结果看，一共创建了3个线程，每个线程有各自的count，自己减少自己的count变量的值。</p>
<p>（2）共享数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        count--;</div><div class="line">        System.out.println(<span class="string">"由"</span> + <span class="keyword">this</span>.currentThread().getName() + <span class="string">"计算.count"</span> + count);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        t4.MyThread mythread = <span class="keyword">new</span> t4.MyThread();</div><div class="line">        Thread a = <span class="keyword">new</span> Thread(mythread,<span class="string">"A"</span>);</div><div class="line">        Thread b = <span class="keyword">new</span> Thread(mythread,<span class="string">"B"</span>);</div><div class="line">        Thread c = <span class="keyword">new</span> Thread(mythread,<span class="string">"C"</span>);</div><div class="line">        Thread d = <span class="keyword">new</span> Thread(mythread,<span class="string">"D"</span>);</div><div class="line">        Thread e = <span class="keyword">new</span> Thread(mythread,<span class="string">"E"</span>);</div><div class="line">        a.start();</div><div class="line">        b.start();</div><div class="line">        c.start();</div><div class="line">        d.start();</div><div class="line">        e.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从结果看到线程A和B打印的都是3，出现了”非线程安全“问题，需要更改代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        count--;</div><div class="line">        System.out.println(<span class="string">"由"</span> + <span class="keyword">this</span>.currentThread().getName() + <span class="string">"计算.count"</span> + count);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过在run方法前加入synchronized关键字，使多个线程在执行run方法时，以排队的方式进行处理。<br>线程在调用run方法时，先判断有没有上锁，如果上锁，必须等其他线程对run调用完后才执行run。<br>synchronized可以在任意对象及方法上加锁，而加锁的这段代码称为互斥区或临界区。</p>
<p>非线程安全主要是指多个线程对同一个对象中的同一个实例变量进行操作时会出现值被更改、值不同步的情况，进而影响程序的执行流程。</p>
<h2 id="currentThread-方法"><a href="#currentThread-方法" class="headerlink" title="currentThread()方法"></a>currentThread()方法</h2><p>currentThread()方法可返回代码段正在被哪个线程调用的信息。 </p>
<h2 id="isAlive-方法"><a href="#isAlive-方法" class="headerlink" title="isAlive() 方法"></a>isAlive() 方法</h2><p>isAlive()方法判断当前的线程是否处于活动状态。活动状态就是线程已经启动且尚未终止。</p>
<h2 id="sleep-方法"><a href="#sleep-方法" class="headerlink" title="sleep() 方法"></a>sleep() 方法</h2><p>sleep()的作用是在指定的毫秒数内让当前“正在执行的线程”休眠（暂停执行）。这个“正在执行的线程”是指this.currenThread()返回的线程。 </p>
<h2 id="getId-方法"><a href="#getId-方法" class="headerlink" title="getId() 方法"></a>getId() 方法</h2><p>getId()方法的作用是取得线程的唯一标识。</p>
<h2 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h2><h3 id="停止不了的线程"><a href="#停止不了的线程" class="headerlink" title="停止不了的线程"></a>停止不了的线程</h3><p>大多数停止一个线程的操作使用Thread.interrupt()方法，尽管方法的名称是“停止，中止”的意思，调用这个方法仅仅是在当前线程中打了一个停止的标记，并不是真的停止线程。</p>
<h3 id="判断线程是否是停止状态"><a href="#判断线程是否是停止状态" class="headerlink" title="判断线程是否是停止状态"></a>判断线程是否是停止状态</h3><p>Thread.java类中提供了两种方法。</p>
<ol>
<li>this.interrupted()：测试当前线程是否已经中断，执行后具有将状态标志清除为false的功能。</li>
<li>this.isInterrupted()：测试线程是否已经中断，但不清楚状态标志。</li>
</ol>
<p>interrupted()方法的声明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<p>isInterrupted()方法的声明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<h3 id="能停止的线程——异常法"><a href="#能停止的线程——异常法" class="headerlink" title="能停止的线程——异常法"></a>能停止的线程——异常法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.isInterrupted()) &#123;</div><div class="line">                    System.out.println(<span class="string">"已经是停止状态了！我要退出了！"</span>);</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"i="</span> + (i + <span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"我在for下面"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            System.out.println(<span class="string">"进MyThread.java类run 方法中的catch了！"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            MyThread thread = <span class="keyword">new</span> MyThread();</div><div class="line">            thread.start();</div><div class="line">            Thread.sleep(<span class="number">2000</span>);</div><div class="line">            thread.interrupt();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            System.out.println(<span class="string">"main catch"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"end!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在沉睡中停止"><a href="#在沉睡中停止" class="headerlink" title="在沉睡中停止"></a>在沉睡中停止</h3><p>如果在sleep状态下停止某一线程，会进入catch语句，并且清楚停止状态值，使之变成false。</p>
<h3 id="能停止的线程——暴力停止"><a href="#能停止的线程——暴力停止" class="headerlink" title="能停止的线程——暴力停止"></a>能停止的线程——暴力停止</h3><p>使用stoo()方法停止线程是非常暴力的。方法stop()已经被作废，因为如果强制让线程停止则有可能使一些清理性的工作得不到完成。另一个情况就是对锁的对象进行了“解锁”，导致数据得不到同步的处理，出现数据不一致的问题。</p>
<h3 id="使用return停止线程"><a href="#使用return停止线程" class="headerlink" title="使用return停止线程"></a>使用return停止线程</h3><p>将方法interrupt()与return结合使用也能实现停止线程的效果。不过还是建议使用”抛异常“的方法来实现线程的停止，因为在catch块中还可以将异常向上抛，使线程停止的事件得以传播。</p>
<h2 id="暂停线程"><a href="#暂停线程" class="headerlink" title="暂停线程"></a>暂停线程</h2><p>暂停线程意味着此线程还可以恢复运行。在Java多线程中，可以使用suspend()方法暂停线程，使用resume()方法恢复线程的执行。</p>
<h3 id="缺点——独占"><a href="#缺点——独占" class="headerlink" title="缺点——独占"></a>缺点——独占</h3><p>在使用suspend与resume方法时，如果使用不当，极易造成公共的同步对象的独占，使得其他线程无法访问公共同步对象。</p>
<h3 id="缺点——不同步"><a href="#缺点——不同步" class="headerlink" title="缺点——不同步"></a>缺点——不同步</h3><p>在使用suspend与resume方法时也容易出现因为线程的暂停而导致数据不同步的情况。</p>
<h2 id="yield方法"><a href="#yield方法" class="headerlink" title="yield方法"></a>yield方法</h2><p>yield方法的作用时放弃当前的cpu资源，将它让给其他的任务去占用cpu执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得cpu时间片。</p>
<h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p>在操作系统中，线程可以划分优先级，优先级较高的线程得到的CPU资源较多。设置线程的优先级使用setPriority()方法。在Java中，优先级分为1~10这10个等级，如果小于1或大于10，则抛出IllegalArgumentException()。</p>
<p>设置线程的优先级使用setPriority()方法，此方法在JDK的源代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> newPriority)</span> </span>&#123;</div><div class="line">    ThreadGroup g;</div><div class="line">    checkAccess();</div><div class="line">    <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((g = getThreadGroup()) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</div><div class="line">            newPriority = g.getMaxPriority();</div><div class="line">        &#125;</div><div class="line">        setPriority0(priority = newPriority);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="线程优先级的继承特性"><a href="#线程优先级的继承特性" class="headerlink" title="线程优先级的继承特性"></a>线程优先级的继承特性</h3><p>在Java中，线程的优先级具有继承性，比如A线程启动B线程，则B线程的优先级与A是一样的。</p>
<h3 id="优先级具有规则性"><a href="#优先级具有规则性" class="headerlink" title="优先级具有规则性"></a>优先级具有规则性</h3><p>高优先级的线程总是大部分先执行完，但不代表高优先级的线程全部先执行完。当线程优先级的等级差距很大时，谁先执行完何代码的调用顺序无关。CPU尽量将执行资源让给优先级比较高的线程。</p>
<h3 id="优先级具有随机性"><a href="#优先级具有随机性" class="headerlink" title="优先级具有随机性"></a>优先级具有随机性</h3><p>不要把线程的优先级与运行结果的顺序作为衡量的标准，优先级较高的线程并不一定每一次都先执行完run()方法中的任务，也就是说，线程优先级与打印顺序无关，不要将这两者的关系相关联，它们的关系具有不确定性何随机性。</p>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>在Java线程中有两种线程，一种是用户线程，另一种是守护线程。守护线程是一种特殊的线程，它的特性有“陪伴“的含义，当进程中不存在非守护线程了，则守护线程自动销毁。典型的守护线程是垃圾回收线程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java Multi-thread Programming学习笔记（一）&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>图解HTTP学习笔记（四）</title>
    <link href="http://yoursite.com/2018/05/23/%E5%9B%BE%E8%A7%A3HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/23/图解HTTP学习笔记（四）/</id>
    <published>2018-05-23T09:32:23.000Z</published>
    <updated>2018-06-12T06:31:37.725Z</updated>
    
    <content type="html"><![CDATA[<p>图解HTTP（四）<br><a id="more"></a></p>
<h1 id="HTTP首部-续"><a href="#HTTP首部-续" class="headerlink" title="HTTP首部(续)"></a>HTTP首部(续)</h1><h2 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h2><h3 id="Accept-Ranges"><a href="#Accept-Ranges" class="headerlink" title="Accept-Ranges"></a>Accept-Ranges</h3><p><img src="/img/HTTP/HTTP67.png" alt="图片名称" title=""><br>用来告知客户端服务器是否能处理范围请求，以指定获取服务器端某个部分的资源。</p>
<h3 id="Age"><a href="#Age" class="headerlink" title="Age"></a>Age</h3><p><img src="/img/HTTP/HTTP68.png" alt="图片名称" title=""><br>告知客户端，源服务器在多久前创建了响应。</p>
<h3 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h3><p><img src="/img/HTTP/HTTP69.png" alt="图片名称" title=""><br>告知客户端实体标识。</p>
<h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><p><img src="/img/HTTP/HTTP70.png" alt="图片名称" title=""><br>可以将响应接收方引导至某个与请求URI位置不同的资源。</p>
<h2 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h2><h3 id="Allow"><a href="#Allow" class="headerlink" title="Allow"></a>Allow</h3><p><img src="/img/HTTP/HTTP71.png" alt="图片名称" title=""><br>用于通知客户端能够支持Request-URI指定资源的所有HTTP方法。</p>
<h3 id="Content-Encoding"><a href="#Content-Encoding" class="headerlink" title="Content-Encoding"></a>Content-Encoding</h3><p><img src="/img/HTTP/HTTP72.png" alt="图片名称" title=""><br>会告知客户端服务器对实体的主体部分选用的内容编码方式。</p>
<h3 id="Content-Language"><a href="#Content-Language" class="headerlink" title="Content-Language"></a>Content-Language</h3><p><img src="/img/HTTP/HTTP73.png" alt="图片名称" title=""><br>告知客户端，实体主体使用的自然语言。</p>
<h3 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h3><p><img src="/img/HTTP/HTTP74.png" alt="图片名称" title=""><br>表明了实体主体部分的大小。</p>
<h3 id="Content-Location"><a href="#Content-Location" class="headerlink" title="Content-Location"></a>Content-Location</h3><p><img src="/img/HTTP/HTTP75.png" alt="图片名称" title=""><br>给出与报文主体部分相对应的URI。</p>
<h3 id="Content-MD5"><a href="#Content-MD5" class="headerlink" title="Content-MD5"></a>Content-MD5</h3><p><img src="/img/HTTP/HTTP76.png" alt="图片名称" title=""><br>检查报文主体在传输过程中是否保持完整，以及确认传输到达。</p>
<h3 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h3><p><img src="/img/HTTP/HTTP77.png" alt="图片名称" title=""><br>说明了实体主体内对象的媒体类型。</p>
<h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p><img src="/img/HTTP/HTTP78.png" alt="图片名称" title=""><br>将资源失效的日期告知客户端。</p>
<h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h3><p><img src="/img/HTTP/HTTP79.png" alt="图片名称" title=""><br>指明资源最终修改的时间。</p>
<h2 id="为Cookie服务的首部字段"><a href="#为Cookie服务的首部字段" class="headerlink" title="为Cookie服务的首部字段"></a>为Cookie服务的首部字段</h2><p>Cookie的工作机制是用户识别及状态管理。Web网站为了管理用户的状态会通过Web浏览器，把一些数据临时写入用户的计算机内。接着当用户访问该Web网站时，可通过通信方式取回之前发放的Cookie。</p>
<p><img src="/img/HTTP/HTTP80.png" alt="图片名称" title=""></p>
<h3 id="Set-Cookie"><a href="#Set-Cookie" class="headerlink" title="Set-Cookie"></a>Set-Cookie</h3><p><img src="/img/HTTP/HTTP81.png" alt="图片名称" title=""><br>用于通知客户端能够支持Request-URI指定资源的所有HTTP方法。</p>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>首部字段Cookie会告知服务器，当客户端想获得HTTP状态管理支持时，就会在请求中包含从服务器接收到的Cookie。</p>
<h1 id="确保Web安全的HTTPS"><a href="#确保Web安全的HTTPS" class="headerlink" title="确保Web安全的HTTPS"></a>确保Web安全的HTTPS</h1><h2 id="HTTP的缺点"><a href="#HTTP的缺点" class="headerlink" title="HTTP的缺点"></a>HTTP的缺点</h2><h3 id="通信使用明文可能会被窃听"><a href="#通信使用明文可能会被窃听" class="headerlink" title="通信使用明文可能会被窃听"></a>通信使用明文可能会被窃听</h3><p>按TCP/IP协议族的工作机制，通信内容在所有的通信线路上都有可能遭到窥视。即使已经过加密处理的通信，也会被窥视到通信内容。</p>
<p><img src="/img/HTTP/HTTP82.png" alt="图片名称" title=""></p>
<p>目前防止窃听的几种对策中，最普及的是加密技术。<br>一种是将通信加密。HTTP协议中没有加密机制，但可以通过和SSL（Secure Socket Layer，安全套接层）或TLS（Transporter Layer Security，安全层传输协议）的组合使用，加密HTTP的通信内容。与SSL组合使用的HTTP被称为HTTPS（HTTP Secure，超文本传输安全协议）。<br>另一种是将参与通信的内容本身加密，即把HTTP报文里所含的内容进行加密处理。</p>
<h3 id="不验证通信方的身份就可能遭遇伪装"><a href="#不验证通信方的身份就可能遭遇伪装" class="headerlink" title="不验证通信方的身份就可能遭遇伪装"></a>不验证通信方的身份就可能遭遇伪装</h3><p>在HTTP协议通信时，由于不存在确认通信方的处理步骤，任何人都可以发起请求。会存在以下隐患</p>
<ul>
<li>无法确定请求发送至目标的Web服务器是否是按真实意图返回响应的那台服务器。有可能是已伪装的Web服务器。</li>
<li>无法确定响应返回到的客户端是否是按真实意图响应接收的那个客户端。有可能是已伪装的客户端。</li>
<li>无法确定正在通信的对方是否具备访问权限。因为某些Web服务器上保存着重要的信息，执行发给特定用户通信的权限。</li>
<li>无法判断请求时来自何方、出自谁手。</li>
<li>即使是无意义的请求也会照单全收。无法阻止海量请求下的DoS攻击（Denial of Service，拒绝服务攻击）。</li>
</ul>
<p>虽然使用HTTP协议无法确定通信方，但如果使用SSL则可以。SSL不仅提供加密处理，而且还使用了一种被称为证书的手段，可用于确定方。</p>
<p><img src="/img/HTTP/HTTP83.png" alt="图片名称" title=""></p>
<h3 id="无法证明报文完整性，可能已遭篡改"><a href="#无法证明报文完整性，可能已遭篡改" class="headerlink" title="无法证明报文完整性，可能已遭篡改"></a>无法证明报文完整性，可能已遭篡改</h3><p>没有任何办法确认，发出的请求/响应和接收到的请求/响应是前后相同的。</p>
<p><img src="/img/HTTP/HTTP84.png" alt="图片名称" title=""></p>
<h2 id="HTTP-加密-认证-完整性保护-HTTPS"><a href="#HTTP-加密-认证-完整性保护-HTTPS" class="headerlink" title="HTTP+加密+认证+完整性保护=HTTPS"></a>HTTP+加密+认证+完整性保护=HTTPS</h2><h3 id="HTTP加上加密处理和认证以及完整性保护后即是HTTPS"><a href="#HTTP加上加密处理和认证以及完整性保护后即是HTTPS" class="headerlink" title="HTTP加上加密处理和认证以及完整性保护后即是HTTPS"></a>HTTP加上加密处理和认证以及完整性保护后即是HTTPS</h3><p><img src="/img/HTTP/HTTP85.png" alt="图片名称" title=""></p>
<h3 id="HTTPS是身披SSL外壳的HTTP"><a href="#HTTPS是身披SSL外壳的HTTP" class="headerlink" title="HTTPS是身披SSL外壳的HTTP"></a>HTTPS是身披SSL外壳的HTTP</h3><p><img src="/img/HTTP/HTTP86.png" alt="图片名称" title=""></p>
<h3 id="相互交互密钥的公开密钥加密技术"><a href="#相互交互密钥的公开密钥加密技术" class="headerlink" title="相互交互密钥的公开密钥加密技术"></a>相互交互密钥的公开密钥加密技术</h3><p>SSL采用公开密钥加密的加密处理方式。<br>近代的加密算法中加密算法公开，密钥保密。</p>
<p><img src="/img/HTTP/HTTP87.png" alt="图片名称" title=""></p>
<p>公开密钥加密解决了共享密钥加密的困难。公开密钥加密使用一对非对称的密钥。一把叫做私有密钥，另一把叫做公开密钥</p>
<p><img src="/img/HTTP/HTTP88.png" alt="图片名称" title=""></p>
<p>HTTPS采用共享密钥加密和公开密钥加密两者并用的混合加密机制。</p>
<p><img src="/img/HTTP/HTTP89.png" alt="图片名称" title=""></p>
<h3 id="HTTPS的安全通信机制"><a href="#HTTPS的安全通信机制" class="headerlink" title="HTTPS的安全通信机制"></a>HTTPS的安全通信机制</h3><p><img src="/img/HTTP/HTTP90.png" alt="图片名称" title=""><br><img src="/img/HTTP/HTTP91.png" alt="图片名称" title=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图解HTTP（四）&lt;br&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>图解HTTP学习笔记（三）</title>
    <link href="http://yoursite.com/2018/05/14/%E5%9B%BE%E8%A7%A3HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/14/图解HTTP学习笔记（三）/</id>
    <published>2018-05-14T11:16:24.000Z</published>
    <updated>2018-05-23T09:49:30.413Z</updated>
    
    <content type="html"><![CDATA[<p>图解HTTP（三）<br><a id="more"></a></p>
<h1 id="HTTP首部"><a href="#HTTP首部" class="headerlink" title="HTTP首部"></a>HTTP首部</h1><h2 id="HTTP报文首部"><a href="#HTTP报文首部" class="headerlink" title="HTTP报文首部"></a>HTTP报文首部</h2><p><img src="/img/HTTP/HTTP43.png" alt="图片名称" title=""><br><img src="/img/HTTP/HTTP44.png" alt="图片名称" title=""></p>
<h2 id="HTTP首部字段"><a href="#HTTP首部字段" class="headerlink" title="HTTP首部字段"></a>HTTP首部字段</h2><p>使用首部字段是为了给浏览器和服务器提供报文主体大小、所使用的语言、认证信息等内容。HTTP首部字段由首部字段名和字段值构成，中间用冒号分隔。</p>
<p><img src="/img/HTTP/HTTP45.png" alt="图片名称" title=""></p>
<h2 id="HTTP-1-1通用首部字段"><a href="#HTTP-1-1通用首部字段" class="headerlink" title="HTTP/1.1通用首部字段"></a>HTTP/1.1通用首部字段</h2><p>通用首部字段是指，请求报文和响应报文双方都会使用的首部。</p>
<h3 id="Cashe-Control"><a href="#Cashe-Control" class="headerlink" title="Cashe-Control"></a>Cashe-Control</h3><p>通过指定Caseh-Control的指令，就能操作缓存的工作机制。<br><img src="/img/HTTP/HTTP46.png" alt="图片名称" title=""><br><img src="/img/HTTP/HTTP47.png" alt="图片名称" title=""><br>例如：<br><img src="/img/HTTP/HTTP48.png" alt="图片名称" title=""><br>当指定使用public指令，则明确表明其他用户也可以利用缓存。</p>
<p><img src="/img/HTTP/HTTP49.png" alt="图片名称" title=""><br>使用no-cashe是为了防止从缓存中返回过期的资源。<br><img src="/img/HTTP/HTTP50.png" alt="图片名称" title=""><br>该指令规定缓存不能再本地存储请求或响应的任一部分。</p>
<h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>作用：控制不再转发给代理的首部字段，管理持久连接<br><img src="/img/HTTP/HTTP51.png" alt="图片名称" title=""><br>HTTP/1.1的默认连接都是持久连接。1.1之前的默认是非持久连接，要想在旧版的HTTP协议上维持持续连接，需指定Connection值为Keep-Alive。</p>
<h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>Date表明创建HTTP报文的日期和时间。<br><img src="/img/HTTP/HTTP52.png" alt="图片名称" title=""></p>
<h3 id="Trailer"><a href="#Trailer" class="headerlink" title="Trailer"></a>Trailer</h3><p>Trailer会事先说明在报文主体后记录了哪些首部字段。<br><img src="/img/HTTP/HTTP53.png" alt="图片名称" title=""></p>
<h3 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a>Transfer-Encoding</h3><p><img src="/img/HTTP/HTTP54.png" alt="图片名称" title=""><br>规定了传输报文主体时采用的编码方式。</p>
<h3 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h3><p><img src="/img/HTTP/HTTP55.png" alt="图片名称" title=""><br>用于检测HTTP协议及其他协议是否可使用更高的版本进行通信。</p>
<h3 id="Via"><a href="#Via" class="headerlink" title="Via"></a>Via</h3><p><img src="/img/HTTP/HTTP56.png" alt="图片名称" title=""><br>追踪客户端与服务器之间的请求和响应报文的传输路径。</p>
<h2 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h2><h3 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h3><p><img src="/img/HTTP/HTTP57.png" alt="图片名称" title=""><br>通知服务器，用户代理能够处理的媒体类型及媒体类型的相对优先级。</p>
<h3 id="Accept-Charset"><a href="#Accept-Charset" class="headerlink" title="Accept-Charset"></a>Accept-Charset</h3><p><img src="/img/HTTP/HTTP58.png" alt="图片名称" title=""><br>通知服务器用户代理支持的字符集及字符集的相对优先顺序。</p>
<h3 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h3><p><img src="/img/HTTP/HTTP59.png" alt="图片名称" title=""><br>告知服务器用户代理支持的内容编码及内容编码的优先级顺序。</p>
<h3 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h3><p><img src="/img/HTTP/HTTP60.png" alt="图片名称" title=""><br>告知服务器用户代理能够处理的自然语言以及自然语言集的相对优先级。</p>
<h3 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h3><p><img src="/img/HTTP/HTTP61.png" alt="图片名称" title=""><br>告知服务器，用户代理的认证信息。</p>
<h3 id="Except"><a href="#Except" class="headerlink" title="Except"></a>Except</h3><p><img src="/img/HTTP/HTTP62.png" alt="图片名称" title=""><br>告知服务器，期待出现的某种特定行为。</p>
<h3 id="From"><a href="#From" class="headerlink" title="From"></a>From</h3><p><img src="/img/HTTP/HTTP63.png" alt="图片名称" title=""><br>告知服务器使用用户代理的用户的电子邮件地址。</p>
<h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><p><img src="/img/HTTP/HTTP64.png" alt="图片名称" title=""><br>告知服务器，请求的资源所处的互联网主机名和端口号。</p>
<h3 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h3><p><img src="/img/HTTP/HTTP65.png" alt="图片名称" title=""><br>告知服务器请求的原始资源URI。</p>
<h3 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h3><p><img src="/img/HTTP/HTTP66.png" alt="图片名称" title=""><br>会将创建请求的浏览器和用户代理名称等信息传达给服务器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图解HTTP（三）&lt;br&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>图解HTTP学习笔记（二）</title>
    <link href="http://yoursite.com/2018/05/02/%E5%9B%BE%E8%A7%A3HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/02/图解HTTP学习笔记（二）/</id>
    <published>2018-05-02T12:08:10.000Z</published>
    <updated>2018-05-23T09:53:02.938Z</updated>
    
    <content type="html"><![CDATA[<p>图解HTTP（二）<br><a id="more"></a></p>
<h1 id="返回结果的HTTP状态码"><a href="#返回结果的HTTP状态码" class="headerlink" title="返回结果的HTTP状态码"></a>返回结果的HTTP状态码</h1><h2 id="状态码告知从服务器端返回的请求结果"><a href="#状态码告知从服务器端返回的请求结果" class="headerlink" title="状态码告知从服务器端返回的请求结果"></a>状态码告知从服务器端返回的请求结果</h2><p>状态码的职责是当客户端向2服务器端发送请求时，描述返回的请求结果。<br><img src="/img/HTTP/HTTP23.png" alt="图片名称" title=""></p>
<h2 id="2XX成功"><a href="#2XX成功" class="headerlink" title="2XX成功"></a>2XX成功</h2><p>2XX的响应结果表明请求被正常处理了。</p>
<h3 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h3><p><img src="/img/HTTP/HTTP24.png" alt="图片名称" title=""><br>表示从客户端发来的请求在服务器端被正常处理了。</p>
<h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h3><p><img src="/img/HTTP/HTTP25.png" alt="图片名称" title=""><br>代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。</p>
<h3 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h3><p><img src="/img/HTTP/HTTP26.png" alt="图片名称" title=""><br>表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。</p>
<h2 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h2><p>3XX响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</p>
<h3 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h3><p><img src="/img/HTTP/HTTP27.png" alt="图片名称" title=""><br>永久性重定向。表示请求的资源已被分配了新的URI，以后应使用资源现在所指的URI。</p>
<h3 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h3><p><img src="/img/HTTP/HTTP28.png" alt="图片名称" title=""><br>表示请求的资源已被分配的新的URI，希望用户能使用新的URI访问。和301相比，302只是临时性质的改变，可能还会改变。</p>
<h3 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h3><p><img src="/img/HTTP/HTTP29.png" alt="图片名称" title=""><br>表示由于请求对应的资源存在另一个URI。</p>
<h3 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h3><p><img src="/img/HTTP/HTTP30.png" alt="图片名称" title=""><br>表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但为满足条件的情况。</p>
<h3 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h3><p>临时重定向。该状态码与302Found有着相同的含义。</p>
<h2 id="4XX客户端错误"><a href="#4XX客户端错误" class="headerlink" title="4XX客户端错误"></a>4XX客户端错误</h2><h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h3><p><img src="/img/HTTP/HTTP31.png" alt="图片名称" title=""><br>表示请求报文中存在语法错误。</p>
<h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p><img src="/img/HTTP/HTTP32.png" alt="图片名称" title=""><br>表示发送的请求需要有通过HTTP认证（BASIC认证、DIGEST认证）的认证信息。若之前已进行过一次请求，则表示用户认证失败。</p>
<h3 id="403-Frobidden"><a href="#403-Frobidden" class="headerlink" title="403 Frobidden"></a>403 Frobidden</h3><p><img src="/img/HTTP/HTTP33.png" alt="图片名称" title=""><br>表明对请求资源的访问被服务器拒绝了。</p>
<h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h3><p><img src="/img/HTTP/HTTP34.png" alt="图片名称" title=""><br>表明服务器上无法找到请求的资源，除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</p>
<h2 id="5XX服务器错误"><a href="#5XX服务器错误" class="headerlink" title="5XX服务器错误"></a>5XX服务器错误</h2><h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p><img src="/img/HTTP/HTTP35.png" alt="图片名称" title=""><br>表明服务器在执行请求时发生了错误。也可能是Web应用存在的bug或某些临时的故障。</p>
<h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h3><p><img src="/img/HTTP/HTTP36.png" alt="图片名称" title=""><br>表明服务器暂时处于超负载或正在进行停机维护，无法处理请求。</p>
<h1 id="与HTTP协作的Web服务器"><a href="#与HTTP协作的Web服务器" class="headerlink" title="与HTTP协作的Web服务器"></a>与HTTP协作的Web服务器</h1><h2 id="通信数据转发程序：代理、网关、隧道"><a href="#通信数据转发程序：代理、网关、隧道" class="headerlink" title="通信数据转发程序：代理、网关、隧道"></a>通信数据转发程序：代理、网关、隧道</h2><p>代理是一种有转发功能的应用程序，扮演了服务器和客户端“中间人”的角色，接收2由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。</p>
<p>网关是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。</p>
<p>隧道是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。</p>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p><img src="/img/HTTP/HTTP37.png" alt="图片名称" title=""><br><img src="/img/HTTP/HTTP38.png" alt="图片名称" title=""><br><img src="/img/HTTP/HTTP39.png" alt="图片名称" title=""></p>
<p>使用代理服务器的理由：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的，等等。</p>
<p>缓存代理：<br>代理转发响应时，缓存代理预先将资源的副本（缓存）保存在代理服务器上，当再次请求相同资源，可以返回之前缓存的资源。</p>
<p>透明代理：<br>转发请求或响应时，不对报文进行修改，反之称为非透明代理。</p>
<h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p><img src="/img/HTTP/HTTP40.png" alt="图片名称" title=""><br>网关的工作机制和代理十分相似，而网关能够使通信线路上的服务器提提供非HTTP协议服务，利用网关嗯那个提高通信的安全性。</p>
<h3 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h3><p><img src="/img/HTTP/HTTP41.png" alt="图片名称" title=""><br>隧道的目的时确保客户端与服务器进行安全的通信。</p>
<h2 id="保存资源的缓存"><a href="#保存资源的缓存" class="headerlink" title="保存资源的缓存"></a>保存资源的缓存</h2><p>缓存是指代理服务器或客户端本地磁盘内保存的资源副本，利用缓存可减少对源服务器的访问，因此也就节省了通信流量和通信时间。<br><img src="/img/HTTP/HTTP42.png" alt="图片名称" title=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图解HTTP（二）&lt;br&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>图解HTTP学习笔记（一）</title>
    <link href="http://yoursite.com/2018/05/02/%E5%9B%BE%E8%A7%A3HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/02/图解HTTP学习笔记（一）/</id>
    <published>2018-05-02T11:18:34.000Z</published>
    <updated>2018-05-23T09:52:26.657Z</updated>
    
    <content type="html"><![CDATA[<p>图解HTTP（一）<br><a id="more"></a></p>
<h1 id="了解Web与网络基础"><a href="#了解Web与网络基础" class="headerlink" title="了解Web与网络基础"></a>了解Web与网络基础</h1><h2 id="网络基础TCP-IP"><a href="#网络基础TCP-IP" class="headerlink" title="网络基础TCP/IP"></a>网络基础TCP/IP</h2><p>通常使用的网络实在TCP/IP协议族的基础上运作的，HTTP属于它内部的子集。</p>
<h3 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h3><p>不同硬件、操作系统之间的通信，所有的这一切都需要一种规则。这种规则称为协议（protocal），TCP/IP是互联网相关的各类协议族的总称。</p>
<h3 id="TCP-IP的分层管理"><a href="#TCP-IP的分层管理" class="headerlink" title="TCP/IP的分层管理"></a>TCP/IP的分层管理</h3><p>TCP/IP协议族按层次分别分为：应用、传输、网络、数据链路层。<br>应用层决定了向用户提供了应用服务时通信的活动。<br>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。<br>网络层用来处理在网络上流动的数据包。<br>链路层用来处理联结网络的硬件部分。</p>
<h3 id="TCP-IP通信传输流"><a href="#TCP-IP通信传输流" class="headerlink" title="TCP/IP通信传输流"></a>TCP/IP通信传输流</h3><p><img src="/img/HTTP/HTTP1.png" alt="图片名称" title=""><br><img src="/img/HTTP/HTTP2.png" alt="图片名称" title=""></p>
<h2 id="与HTTP关系密切的协议：IP、TCP和DNS"><a href="#与HTTP关系密切的协议：IP、TCP和DNS" class="headerlink" title="与HTTP关系密切的协议：IP、TCP和DNS"></a>与HTTP关系密切的协议：IP、TCP和DNS</h2><h3 id="负责传输的IP协议（网络层）"><a href="#负责传输的IP协议（网络层）" class="headerlink" title="负责传输的IP协议（网络层）"></a>负责传输的IP协议（网络层）</h3><p>IP协议的作用是把各种数据包传送给对方，而要保证确实传送到对方那里，两个重要条件是IP地址和MAC地址。IP地址指明了节点被分配到的地址，MAC地址是指网卡所属的固定地址。IP地址考研和MAC地址进行配对，IP地址可变换，MAC地址基本上不会更改。</p>
<p>ARP是一种用以解析地址的协议，根据IP地址考研反查出MAC地址。</p>
<p>无论哪台计算机、网络设备，都无法全面掌握互联网中的细节。</p>
<h3 id="确保可靠性的TCP协议（传输层）"><a href="#确保可靠性的TCP协议（传输层）" class="headerlink" title="确保可靠性的TCP协议（传输层）"></a>确保可靠性的TCP协议（传输层）</h3><p>TCP提供可靠的字节流服务，即为了方便传输，把大块数据分割成以报文段为单位的数据包进行管理。</p>
<p>TCP协议采用三次握手将数据准确地送达目标处。发送端发送带SYN的数据包，接收端回传带SYN/ACK的数据包，发送端再回传带ACK的是数据包。<br><img src="/img/HTTP/HTTP3.png" alt="图片名称" title=""></p>
<h3 id="负责域名解析的DNS服务（应用层）"><a href="#负责域名解析的DNS服务（应用层）" class="headerlink" title="负责域名解析的DNS服务（应用层）"></a>负责域名解析的DNS服务（应用层）</h3><p>DNS协议提供通过域名查找IP地址，或逆向从IP地址反查域名的服务。<br><img src="/img/HTTP/HTTP4.png" alt="图片名称" title=""></p>
<h2 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h2><p>URI：Uniform Resource Identifier，统一资源标识符，<br>URL：Uniform Resource Locator，统一资源定位符。</p>
<p>URI用字符串标识某一互联网资源，而URL表示资源的地点。可见URL是URI的子集。<br><img src="/img/HTTP/HTTP5.png" alt="图片名称" title=""></p>
<h1 id="简单的HTTP协议"><a href="#简单的HTTP协议" class="headerlink" title="简单的HTTP协议"></a>简单的HTTP协议</h1><h2 id="HTTP协议用于客户端和服务器端之间的通信"><a href="#HTTP协议用于客户端和服务器端之间的通信" class="headerlink" title="HTTP协议用于客户端和服务器端之间的通信"></a>HTTP协议用于客户端和服务器端之间的通信</h2><p>应用HTTP协议时，必定一端担任客户端，另一端担任服务器<br><img src="/img/HTTP/HTTP6.png" alt="图片名称" title=""></p>
<h2 id="通过请求和响应的交换达成通信"><a href="#通过请求和响应的交换达成通信" class="headerlink" title="通过请求和响应的交换达成通信"></a>通过请求和响应的交换达成通信</h2><p>请求必由客户端发出，服务端回复响应<br><img src="/img/HTTP/HTTP7.png" alt="图片名称" title=""><br><img src="/img/HTTP/HTTP8.png" alt="图片名称" title=""><br><img src="/img/HTTP/HTTP9.png" alt="图片名称" title=""></p>
<h2 id="HTTP是不保存状态的协议"><a href="#HTTP是不保存状态的协议" class="headerlink" title="HTTP是不保存状态的协议"></a>HTTP是不保存状态的协议</h2><p>不保存状态即无状态，HTTP协议自身不对请求和响应之间的通信状态进行保存。<br><img src="/img/HTTP/HTTP10.png" alt="图片名称" title=""></p>
<h2 id="告知服务器意图的HTTP方法"><a href="#告知服务器意图的HTTP方法" class="headerlink" title="告知服务器意图的HTTP方法"></a>告知服务器意图的HTTP方法</h2><h3 id="GET-获取资源"><a href="#GET-获取资源" class="headerlink" title="GET:获取资源"></a>GET:获取资源</h3><p>GET方法请求访问已被URI识别的资源。指定的资源经服务器解析后返回响应内容。<br><img src="/img/HTTP/HTTP11.png" alt="图片名称" title=""></p>
<h3 id="POST：传输实体主体"><a href="#POST：传输实体主体" class="headerlink" title="POST：传输实体主体"></a>POST：传输实体主体</h3><p><img src="/img/HTTP/HTTP12.png" alt="图片名称" title=""></p>
<h3 id="PUT：传输文件"><a href="#PUT：传输文件" class="headerlink" title="PUT：传输文件"></a>PUT：传输文件</h3><p>PUT用来传输文件，像FTP一样，要求在请求报文的主题中包含文件内容，然后保存到请求URI指定的位置。但自身不带验证机制，存在安全问题，所有一般不使用。<br><img src="/img/HTTP/HTTP13.png" alt="图片名称" title=""></p>
<h3 id="HEAD：获得报文首部"><a href="#HEAD：获得报文首部" class="headerlink" title="HEAD：获得报文首部"></a>HEAD：获得报文首部</h3><p>HEAD跟GET一样，指示不返回报文主体部分。<br><img src="/img/HTTP/HTTP14.png" alt="图片名称" title=""></p>
<h3 id="DELETE：删除文件"><a href="#DELETE：删除文件" class="headerlink" title="DELETE：删除文件"></a>DELETE：删除文件</h3><p>DELDETE用来删除文件，与PUT相反，同样不安全，不常使用。<br><img src="/img/HTTP/HTTP15.png" alt="图片名称" title=""><br><img src="/img/HTTP/HTTP16.png" alt="图片名称" title=""></p>
<h2 id="持久连接节省通信量"><a href="#持久连接节省通信量" class="headerlink" title="持久连接节省通信量"></a>持久连接节省通信量</h2><p><img src="/img/HTTP/HTTP17.png" alt="图片名称" title=""></p>
<h3 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h3><p>为解决上述TCP连接的问题，HTTP/1.1和部分HTTP/1.0提出了持久连接，只要任意一端没有明确提出断开连接，则保持TCP连接状态。<br><img src="/img/HTTP/HTTP18.png" alt="图片名称" title=""></p>
<h3 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h3><p>持久连接使得多数请求以管线化方式发送成为可能。即同时并行发送多个请求。<br><img src="/img/HTTP/HTTP19.png" alt="图片名称" title=""></p>
<h2 id="使用Cookie的状态管理"><a href="#使用Cookie的状态管理" class="headerlink" title="使用Cookie的状态管理"></a>使用Cookie的状态管理</h2><p>Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。Cookie会根据从服务器发送的响应报文内的Set-Cookie首部字段信息，通知客户端保存Cookie。<br><img src="/img/HTTP/HTTP20.png" alt="图片名称" title=""></p>
<h1 id="HTTP报文内的HTTP信息"><a href="#HTTP报文内的HTTP信息" class="headerlink" title="HTTP报文内的HTTP信息"></a>HTTP报文内的HTTP信息</h1><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><p>用于HTTP协议交互的信息称为HTTP报文。客户端的HTTP报文叫做请求报文，服务器端的叫做响应报文。<br><img src="/img/HTTP/HTTP21.png" alt="图片名称" title=""><br><img src="/img/HTTP/HTTP22.png" alt="图片名称" title=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图解HTTP（一）&lt;br&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>MysqlCrashCourse学习笔记（三）</title>
    <link href="http://yoursite.com/2018/04/14/MysqlCrashCourse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/14/MysqlCrashCourse学习笔记（三）/</id>
    <published>2018-04-14T06:53:38.000Z</published>
    <updated>2018-05-17T05:55:59.833Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL必知必会（三）<br><a id="more"></a></p>
<h1 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h1><h2 id="利用子查询进行过滤"><a href="#利用子查询进行过滤" class="headerlink" title="利用子查询进行过滤"></a>利用子查询进行过滤</h2><p>在SELECT语句中，子查询总是从内向外处理。</p>
<pre><code>SELECT cust_id FROM orders WHERE order_num IN (SELECT order_num FROM orderitems WHERE prod_id = &apos;TNT2&apos;);
</code></pre><h1 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h1><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。</p>
<h2 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h2><pre><code>SELECT vend_name, prod_name, prod_price FROM vendors, products
WHERE vendors.vend_id = products.vend_id ORDER BY vend_name, prod_name;
</code></pre><p><strong>完全限定名：</strong> 在引用的列可能出现二义性时，必须使用完全限定名（一个点分隔的表名和列名）。</p>
<p><strong>笛卡儿积：</strong> 由没有联结条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。</p>
<h2 id="内部联结"><a href="#内部联结" class="headerlink" title="内部联结"></a>内部联结</h2><pre><code>SELECT vend_name, prod_name, prod_price FROM vendors INNER JOIN products
on vendors.vend_id = products.vend_id ;
</code></pre><p>此语句中的SELECT与前面的SELECT语句相同，但FROM子句不同。这里，两个表之间的关系时FROM子句的组成部分，以INNER JOIN指定。<br>在使用这种语法时，联结条件用特定的ON子句而不是WHERE子句给出。传递给ON的实际条件与传递给WHERE的相同。</p>
<h2 id="联结多个表"><a href="#联结多个表" class="headerlink" title="联结多个表"></a>联结多个表</h2><p>SQL对一条SELECT语句中可以联结的表的数目没有限制。</p>
<h1 id="创建高级联结"><a href="#创建高级联结" class="headerlink" title="创建高级联结"></a>创建高级联结</h1><h2 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h2><pre><code>SELECT prod_id, prod_name FROM products WHERE vend_id =
(SELECT vend_id FROM products WHERE prod_id = &apos;DTNTR&apos;)；
</code></pre><p>等价于</p>
<pre><code>SELECT p1.prod_id, p1.prod_name FROM products AS p1, products AS p2
WHERE p1.vend_id = p2.vend_id AND p2.prod_id = &apos;DTNTR&apos;;
</code></pre><h2 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h2><p>无论何时对表进行联结，应该至少有一个列出现在不止一个表中（被联结的列）。标准的联结（内部联结）返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。</p>
<h2 id="外部联结"><a href="#外部联结" class="headerlink" title="外部联结"></a>外部联结</h2><pre><code>SELECT customers.cust_id, orders.order_num FROM customers LEFT OUTER JOIN orders
on customers.cust_id = orders.cust_id;
</code></pre><p>与内部联结关联两个表中的行不同的是，外部联结还包括没有关联行的行。在使用OUTER JOIN语法时，必须使用RIGHT和LEFT关键字指定包括其所有行的表（RIGHT指出的是OUTER JOIN右边的表，而LEFT指出的是OUTER JOIN左边的表）。</p>
<h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><h2 id="使用UNION"><a href="#使用UNION" class="headerlink" title="使用UNION"></a>使用UNION</h2><pre><code>SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price &lt;= 5 
ONION
SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001, 1002);
</code></pre><p>UNION指示MySQL执行两条SELECT语句，并把输出组合成单个查询结果集。</p>
<p>UNION从查询结果集中自动去除了重复的行，如果想返回所有匹配行，可使用UNION ALL而不是UNION。</p>
<p>在用UNION组合查询时，只能使用一条ORDER BY子句，它必须出现在最后一天SELECT语句之后。</p>
<h1 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h1><p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p>
<h2 id="为什么使用视图"><a href="#为什么使用视图" class="headerlink" title="为什么使用视图"></a>为什么使用视图</h2><ol>
<li>重用SQL语句。</li>
<li>简化复杂的SQL操作。</li>
<li>使用表的组成部分而不是整个表。</li>
<li>保护数据。</li>
<li>更改数据格式和表示。</li>
</ol>
<h2 id="视图的规则和限制"><a href="#视图的规则和限制" class="headerlink" title="视图的规则和限制"></a>视图的规则和限制</h2><ol>
<li>视图必须唯一命名。</li>
<li>数目没有限制。</li>
<li>为了创建视图，必须具有足够的访问权限。</li>
<li>视图可以嵌套。</li>
<li>视图不能索引，也不能有关联的触发器或默认值。</li>
<li>视图可以和表一起使用。</li>
</ol>
<h2 id="使用视图-1"><a href="#使用视图-1" class="headerlink" title="使用视图"></a>使用视图</h2><pre><code>CREATE VIEW productcustomers AS 
SELECT cust_name, cust_contact, prod_id FROM customers, orders, orderitems WHERE
customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num;
</code></pre><p>创建一个名为productcustomers的视图。</p>
<pre><code>SELECT cust_name, cust_tact FROM productcustomers WHERE prod_id = &apos;TNT2&apos;;
</code></pre><p>通过WHERE子句从视图中检索特定数据。</p>
<p>通常，视图是可更新的。更新一个视图将更新其基表。</p>
<h1 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h1><h2 id="为什么要使用存储过程"><a href="#为什么要使用存储过程" class="headerlink" title="为什么要使用存储过程"></a>为什么要使用存储过程</h2><ol>
<li>简化复杂的操作。</li>
<li>保证数据的完整性，防止错误。</li>
<li>简化对变动的管理。</li>
<li>提高性能。</li>
</ol>
<p>换句话说就是简单，安全，高性能。</p>
<h2 id="使用存储过程-1"><a href="#使用存储过程-1" class="headerlink" title="使用存储过程"></a>使用存储过程</h2><pre><code>CREATE PROCEDURE productpricing()
BEGIN 
    SELECT Avg(prod_price) AS priceaverage FROM products;
END;
</code></pre><p>如果存储过程接受参数，它们将在（）中列举出来。BEGIN和END用来先抵挡存储过程体。</p>
<pre><code>CALL productpricing();
</code></pre><p>使用。（存储过程实际上是一种函数）</p>
<pre><code>DROP PROCEDURE productpricing;
</code></pre><p>删除存储过程。</p>
<h2 id="使用参数"><a href="#使用参数" class="headerlink" title="使用参数"></a>使用参数</h2><p>一般，存储过程并不显示结果，而是把结果返回给你指定的变量。</p>
<pre><code>CREATE PROCEDURE productpricing(
    OUT pl DECIMAL(8,2),  //DECIMAL为精度函数
    OUT ph DECIMAL(8,2),
    OUT pa DECIMAL(8,2),
)
BEGIN 
    SELECT Min(prod_price) INTO pl FROM products;
    SELECT Max(prod_price) INTO ph FROM products;
    SELECT Avg(prod_price) INTO pa FROM products;
END;
</code></pre><p>此存储过程接受3个参数，pl存储最低价格，ph最高价，pa平均价。关键字OUT指出相应的参数用来从存储过程传出一个值。</p>
<pre><code>CALL productpricing(@pricelow, @pricehigh, @priceaverage);
</code></pre><p>MySQL变量都必须以@开始。</p>
<p>在调用时，这条语句不显示任何数据。它返回以后可以显示的变量。</p>
<p>检索：</p>
<pre><code>SELECT @pricelow, @pricehigh, @priceaverage;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL必知必会（三）&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>MysqlCrashCourse学习笔记（二）</title>
    <link href="http://yoursite.com/2018/04/01/MysqlCrashCourse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/01/MysqlCrashCourse学习笔记（二）/</id>
    <published>2018-04-01T05:49:45.000Z</published>
    <updated>2018-05-17T05:55:59.834Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL必知必会（二）<br><a id="more"></a></p>
<h1 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h1><h2 id="使用WHERE子句"><a href="#使用WHERE子句" class="headerlink" title="使用WHERE子句"></a>使用WHERE子句</h2><p>在SELECT语句中，数据根据WHERE子句中指定的搜索条件进行过滤。WHERE子句在表名(FROM子句)之后给出：</p>
<pre><code>SELECT prod_name, prod_price FROM products WHERE prod_price = 2.50;
</code></pre><p>这条语句从products表中检索两个列，但不返回所有行，只返回prod_price值为2.50的值。</p>
<h2 id="WHERE子句操作符"><a href="#WHERE子句操作符" class="headerlink" title="WHERE子句操作符"></a><center>WHERE子句操作符</center></h2><table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;&gt;</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td style="text-align:center">BETWEEN</td>
<td style="text-align:center">在指定的两个值之间</td>
</tr>
</tbody>
</table>
<pre><code>SELECT prod_name, prod_price FROM products WHERE prod_name = &apos;fuses&apos;;
</code></pre><p>检查WHERE prod_name=’fuses’语句，它返回prod_name的值为Fuses的一行。MySQL在执行匹配时默认不区分大小写；</p>
<pre><code>SELECT prod_name, prod_price FROM products WHERE prod_price &lt; 10;
</code></pre><p>列出价格小于10美元的所有产品；</p>
<pre><code>SELECT vend_id, prod_name FROM products WHERE vend_id &lt;&gt;1003;
</code></pre><p>列出不是由供应商1003制造的所有产品；</p>
<pre><code>SELECT prod_name, prod_price FROM products WHERE prod_price BETWEEN 5 AND 10;
</code></pre><p>检索价格在5美元和10美元之间的产品。使用BETWEEN时，必须指定两个值，用AND分隔。</p>
<h1 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h1><h2 id="AND操作符"><a href="#AND操作符" class="headerlink" title="AND操作符"></a>AND操作符</h2><pre><code>SELECT prod_id, prod_price, prod_name FROM products WHERE vend_id = 1003 AND prod_price &lt;= 10;
</code></pre><p>检索有供应商1003制造且价格小于等于10美元的所有产品的名称和价格。</p>
<h2 id="OR操作符"><a href="#OR操作符" class="headerlink" title="OR操作符"></a>OR操作符</h2><pre><code>SELECT prod_name, prod_price FROM products WHERE vend_id = 1002 OR vend_id =1003;
</code></pre><p>检索由任一个指定供应商制造的所有产品的产品名和价格。</p>
<pre><code>SELECT prod_name, prod_price FROM products WHERE (vend_id = 1002 OR vend_id = 1003) AND prod_price &gt;= 10;
</code></pre><p>SQL在处理OR操作符前，优先处理AND操作符，可以使用圆括号明确地分组相应的操作符。</p>
<h2 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h2><pre><code>SELECT  prod_name, prod_price FROM products WHERE vend_id IN (1002, 1003) ORDER BY prod_name;
</code></pre><p>IN操作符用来指定条件范围，范围中的每个条件都可以进行匹配。</p>
<h1 id="用通配符进行过滤"><a href="#用通配符进行过滤" class="headerlink" title="用通配符进行过滤"></a>用通配符进行过滤</h1><h2 id="百分号（-）通配符"><a href="#百分号（-）通配符" class="headerlink" title="百分号（%）通配符"></a>百分号（%）通配符</h2><pre><code>SELECT prod_id, prod_name FROM products WHERE prod_name LIKE &apos;jet%&apos;;
</code></pre><p>此例子使用了搜索模式’jet%’。在执行时，将检索任意以jet起头的词。%告诉MySQL接受jet之后的任意字符，不管它有多少字符。</p>
<pre><code>SELECT prod_id, prod_name FROM products WHERE prod_name LIKE &apos;%anvil%&apos;;
</code></pre><p>通配符可在搜索模式中任意位置使用，且可以使用多个通配符。</p>
<h2 id="下划线（-）通配符"><a href="#下划线（-）通配符" class="headerlink" title="下划线（_）通配符"></a>下划线（_）通配符</h2><pre><code>SELECT prod_id, prod_name FROM products WHERE prod_name LIKE &apos;_ ton anvil&apos;;
</code></pre><p>下划线的用途与%一样，但下划线只匹配单个字符而不是多个字符。与%能匹配0个字符不一样，_总是匹配一个字符，不能多也不能少。</p>
<h1 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h1><h2 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h2><p>存储在数据库表中的数据一般不是应用程序所需要的格式。计算字段并不实际存在于数据库表中，计算字段是运行时在SELECT语句内创建的。</p>
<h2 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h2><p>在MySQL的SELECT语句中，可使用Concat()函数来拼接两个列。</p>
<pre><code>SELECT Concat(vend_name, &apos;(&apos;, vend_country, &apos;)&apos;) FROM vendors ORDER BY vend_name;
</code></pre><p>上述SELECT语句返回包含上述4个元素的单个列（计算字段）。</p>
<h2 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h2><pre><code>SELECT Concat(vend_name, &apos;(&apos;, vend_country, &apos;)&apos;) AS vend_title FROM vendors ORDER BY vend_name;
</code></pre><p>SQL支持列别名。别名（alias）是一个字段或值的替换名。别名用AS关键字赋予。</p>
<h1 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h1><h2 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a><center>文本处理函数</center></h2><table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Left()</td>
<td style="text-align:center">返回串左边的字符</td>
</tr>
<tr>
<td style="text-align:center">Length()</td>
<td style="text-align:center">返回串的长度</td>
</tr>
<tr>
<td style="text-align:center">Locate()</td>
<td style="text-align:center">找出串的一个字串</td>
</tr>
<tr>
<td style="text-align:center">Lower()</td>
<td style="text-align:center">将串转换为小写</td>
</tr>
<tr>
<td style="text-align:center">LTrim()</td>
<td style="text-align:center">去掉串左边的空格</td>
</tr>
<tr>
<td style="text-align:center">Right()</td>
<td style="text-align:center">返回串右边的字符</td>
</tr>
<tr>
<td style="text-align:center">RTrim()</td>
<td style="text-align:center">去掉串右边的空格</td>
</tr>
<tr>
<td style="text-align:center">Soundex()</td>
<td style="text-align:center">返回串的SOUNDEX值</td>
</tr>
<tr>
<td style="text-align:center">SubString()</td>
<td style="text-align:center">返回子串的字符</td>
</tr>
<tr>
<td style="text-align:center">Upper()</td>
<td style="text-align:center">将串转换为大写</td>
</tr>
</tbody>
</table>
<h2 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a><center>日期和时间处理函数</center></h2><table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AddDate()</td>
<td style="text-align:center">增加一个日期</td>
</tr>
<tr>
<td style="text-align:center">AddTime()</td>
<td style="text-align:center">增加一个时间</td>
</tr>
<tr>
<td style="text-align:center">CurDate()</td>
<td style="text-align:center">返回当前日期</td>
</tr>
<tr>
<td style="text-align:center">CurTime()</td>
<td style="text-align:center">返回当前时间</td>
</tr>
<tr>
<td style="text-align:center">Date()</td>
<td style="text-align:center">返回日期时间的日期部分</td>
</tr>
<tr>
<td style="text-align:center">DateDiff()</td>
<td style="text-align:center">计算两个日期之差</td>
</tr>
<tr>
<td style="text-align:center">Date_ADD()</td>
<td style="text-align:center">高度灵活的日期运算函数</td>
</tr>
<tr>
<td style="text-align:center">Date_Format()</td>
<td style="text-align:center">返回一个格式化的日期或时间串</td>
</tr>
<tr>
<td style="text-align:center">Day()</td>
<td style="text-align:center">返回一个日期的天数部分</td>
</tr>
<tr>
<td style="text-align:center">DayOfWeek()</td>
<td style="text-align:center">对于一个日期，返回对应的星期几</td>
</tr>
<tr>
<td style="text-align:center">Hour()</td>
<td style="text-align:center">返回一个时间的小时部分</td>
</tr>
<tr>
<td style="text-align:center">Minute()</td>
<td style="text-align:center">返回一个时间的分钟部分</td>
</tr>
<tr>
<td style="text-align:center">Month()</td>
<td style="text-align:center">返回一个日期的月份部分</td>
</tr>
<tr>
<td style="text-align:center">Now()</td>
<td style="text-align:center">返回当前日期和时间</td>
</tr>
<tr>
<td style="text-align:center">Second()</td>
<td style="text-align:center">返回一个时间的秒部分</td>
</tr>
<tr>
<td style="text-align:center">Time()</td>
<td style="text-align:center">返回一个日期时间的时间部分</td>
</tr>
<tr>
<td style="text-align:center">Year()</td>
<td style="text-align:center">返回一个日期的年份部分</td>
</tr>
</tbody>
</table>
<h2 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a><center>数值处理函数</center></h2><table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Abs()</td>
<td style="text-align:center">返回一个数的绝对值</td>
</tr>
<tr>
<td style="text-align:center">Cos()</td>
<td style="text-align:center">返回一个角度的余弦</td>
</tr>
<tr>
<td style="text-align:center">Exp()</td>
<td style="text-align:center">返回一个数的指数值</td>
</tr>
<tr>
<td style="text-align:center">Mod()</td>
<td style="text-align:center">返回除操作的余数</td>
</tr>
<tr>
<td style="text-align:center">Pi()</td>
<td style="text-align:center">返回圆周率</td>
</tr>
<tr>
<td style="text-align:center">Rand()</td>
<td style="text-align:center">返回一个随机数</td>
</tr>
<tr>
<td style="text-align:center">Sin()</td>
<td style="text-align:center">返回一个角度的正弦</td>
</tr>
<tr>
<td style="text-align:center">Sqrt()</td>
<td style="text-align:center">返回一个数的平方根</td>
</tr>
<tr>
<td style="text-align:center">Tan()</td>
<td style="text-align:center">返回一个角度的正切</td>
</tr>
</tbody>
</table>
<h1 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h1><h2 id="SQL聚集函数"><a href="#SQL聚集函数" class="headerlink" title="SQL聚集函数"></a><center>SQL聚集函数</center></h2><table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVG()</td>
<td style="text-align:center">返回某列的平均值</td>
</tr>
<tr>
<td style="text-align:center">COUNT()</td>
<td style="text-align:center">返回某列的行数</td>
</tr>
<tr>
<td style="text-align:center">MAX()</td>
<td style="text-align:center">返回某列的最大值</td>
</tr>
<tr>
<td style="text-align:center">MIN()</td>
<td style="text-align:center">返回某列的最小值</td>
</tr>
<tr>
<td style="text-align:center">SUM()</td>
<td style="text-align:center">返回某列值之和</td>
</tr>
</tbody>
</table>
<h1 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h1><h2 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h2><pre><code>SELECT vend_id, COUNT(\*) AS num_prods FROM products GROUP BY vend_id;
</code></pre><p>上面的SELECT语句指定了两个列，vend_id包含产品供应商的ID，num_prods为计算字段。GROUP BY子句指示MySQL按vend_id排序并分组数据。</p>
<h2 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h2><pre><code>SELECT cust_id, COUNT(\*) AS orders FROM orders GROUP BY cust_id HAVING COUNT(\*) &gt;= 2;
</code></pre><p>WHERE与HAVING相似，WHERE过滤行，HAVING过滤分组。</p>
<h2 id="分组和排序"><a href="#分组和排序" class="headerlink" title="分组和排序"></a><center>分组和排序</center></h2><table>
<thead>
<tr>
<th style="text-align:center">ORDER BY</th>
<th style="text-align:center">GROUP BY</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">排序产生的输出</td>
<td style="text-align:center">分组行。但输出可能不是分组的顺序</td>
</tr>
<tr>
<td style="text-align:center">任意列都可以使用</td>
<td style="text-align:center">只可能使用选择列或表达式列，而且必须使用每个选择列表达式</td>
</tr>
<tr>
<td style="text-align:center">不一定需要</td>
<td style="text-align:center">如果与聚集函数一起使用列，则必须使用</td>
</tr>
</tbody>
</table>
<h2 id="SELECT子句顺序"><a href="#SELECT子句顺序" class="headerlink" title="SELECT子句顺序"></a><center>SELECT子句顺序</center></h2><table>
<thead>
<tr>
<th style="text-align:center">子句</th>
<th style="text-align:center">说明</th>
<th>是否必须使用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SELECT</td>
<td style="text-align:center">要返回的列或表达式</td>
<td>是</td>
</tr>
<tr>
<td style="text-align:center">FROM</td>
<td style="text-align:center">从中检索数据的表</td>
<td>仅在从表选择数据时使用</td>
</tr>
<tr>
<td style="text-align:center">WHERE</td>
<td style="text-align:center">行级过滤</td>
<td>否</td>
</tr>
<tr>
<td style="text-align:center">GROUP BY</td>
<td style="text-align:center">分组说明</td>
<td>仅在按组计算聚集时使用</td>
</tr>
<tr>
<td style="text-align:center">HAVING</td>
<td style="text-align:center">组级过滤</td>
<td>否</td>
</tr>
<tr>
<td style="text-align:center">ORDER BY</td>
<td style="text-align:center">输出排序顺序</td>
<td>否</td>
</tr>
<tr>
<td style="text-align:center">LIMIT</td>
<td style="text-align:center">要检索的行数</td>
<td>否</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL必知必会（二）&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>MysqlCrashCourse学习笔记（一）</title>
    <link href="http://yoursite.com/2018/03/25/MysqlCrashCourse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/25/MysqlCrashCourse学习笔记（一）/</id>
    <published>2018-03-25T06:14:00.000Z</published>
    <updated>2018-05-17T05:55:59.831Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL必知必会（一）。<br><a id="more"></a></p>
<h1 id="了解SQL"><a href="#了解SQL" class="headerlink" title="了解SQL"></a>了解SQL</h1><h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><p><strong>数据库</strong>（database）保存有组织的数据的容器（通常是一个文件或一组文件）。</p>
<p>人们通常用数据库来代表所使用的数据库软件，这不正确，确切地说，数据库软件应称为DBMS（数据库管理系统）。数据库是通过DBMS创建和操作的容器。</p>
<p><strong>表</strong>（table）某种特定类型数据的结构化清单。</p>
<p><strong>模式</strong>（schema）关于数据库和表的布局及特性的信息。</p>
<p><strong>列</strong>（column）表中的一个字段。所有表都是由一个或多个列组成的。</p>
<p><strong>数据类型</strong>（datatype）所容许的数据的类型。每个表列都有相应的数据类型，它限制该列中存储的数据。</p>
<p><strong>行</strong>（row）表中的一个记录。</p>
<p><strong>主键</strong>（primary key）一列（或一组列），其值能够唯一区分表中每个行。</p>
<ul>
<li>任意两行都不具有相同的主键值；</li>
<li>每个行都必须具有一个主键值（主键值不允许NULL值）；</li>
<li>在使用多列作为主键时，所有列值的组合必须是唯一的。</li>
</ul>
<h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h2><p> Structured Query Language（结构化查询语言）</p>
<h1 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h1><p> MySQL是一种DBMS，即它是一种数据库软件。</p>
<h1 id="使用MySQL"><a href="#使用MySQL" class="headerlink" title="使用MySQL"></a>使用MySQL</h1><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><p>输入： <code>USE crashcourse;</code><br>输出： <code>Database changes</code></p>
<p>记住，必须先使用USE打开数据库，才能读取其中的数据。</p>
<h2 id="了解数据库和表"><a href="#了解数据库和表" class="headerlink" title="了解数据库和表"></a>了解数据库和表</h2><p>数据库、表、列、用户、权限等信息被存储在数据库和表中。不过，内部的表一般不直接访问。可用SHOW命令来显示这些信息。</p>
<p><code>SHOW DATABASES;</code>    返回可用数据库的一个列表。<br><code>SHOW TABLES;</code>返回当前选择的数据库内可用表的列表。</p>
<p>所支持的其他SHOW语句：<br><code>SHOW COLUMNS;</code><br><code>SHOW STATUS;</code><br><code>SHOW GRANTS;</code><br><code>SHOW ERRORS;</code><br><code>SHOW WARNINGS;</code> </p>
<p>MySQL支持用DESCRIBE作为SHOW XXX FROM的一种快捷方式。</p>
<h1 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h1><p><code>SELECT prod_name FROM product;</code></p>
<p>上述语句利用SELECT语句从products表中检索一个名为prod_name的列，返回所有行，数据没有过滤。</p>
<p>多条SQL语句必须以分号（；）分隔。MySQL如同多数DBMS一样，不需要在单条SQL语句后加分号。SQL语句不区分大小写。</p>
<p><code>SELECT prod_id,prod_name,prod_price FROM products;</code></p>
<p>要想从一个表中检索多个列，使用相同的SELECT语句，唯一的不同是必须在SELECT关键字后给出多个列名，列名之间必须以逗号分隔。（最后一个列名后不加）</p>
<p><code>SELECT * FROM products;</code></p>
<p>如果给定一个通配符（* ），则返回表中所有列。</p>
<p><code>SELECT DISTINCT vend_id FROM products;</code></p>
<p>SELECT DISTINCT vend_id告诉MySQL只返回不同（唯一）的vend_id行。如果使用DISTINCT关键字，它必须直接放在列名的前面。</p>
<p><code>SELECT prod_name FROM products LIMIT 5;</code></p>
<p>此语句使用SELECT语句检索单个列。LIMIT 5指示MySQL返回不多于5行。</p>
<p><code>SELECT prod_name FROM products LIMIT 5,5;</code></p>
<p>LIMIT 5指示MySQL返回从行5开始的5行。第一个数为开始位置，第二个数为要检索的行数。</p>
<h1 id="排序检索数据"><a href="#排序检索数据" class="headerlink" title="排序检索数据"></a>排序检索数据</h1><p><strong>子句（clause）</strong> SQL语句由子句构成，子句的例子有SELECT语句的FROM子句。</p>
<p><code>SELECT prod_name FROM products ORDER BY prod_name;</code></p>
<p>为了明确地排序用SELECT语句检索出的数据，可使用ORDER BY子句，ORDER BY子句取一个或多个列的名字，据此对输出进行排序。这条语句指示MySQL对prod_name列以字母顺序排序数据。</p>
<p><code>SELECT prod_id,prod_price,prod_name FROM products ORDER BY prod_price, prod_name;</code></p>
<p>对于上述例子的输出，仅在多个行具有相同的prod_price值时才对产品按prod_name进行排序。如果prod_price列中所有的值是唯一的，则不会按prod_name排序。</p>
<p><code>SELECT prod_id,prod_price,prod_name FROM products ORDER BY prod_price DESC, prod_name;</code></p>
<p>数据排序不限于升序排序，这是默认的的排序顺序，为了进行降序排序，必须指定DESC关键字。DESC关键字只应用到直接位于其前面的列名。在上例中，只对prod_price列指定DESC，对prod_name列不指定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL必知必会（一）。&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题</title>
    <link href="http://yoursite.com/2018/03/11/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/03/11/Java面试题/</id>
    <published>2018-03-11T08:53:08.000Z</published>
    <updated>2018-05-17T05:55:59.820Z</updated>
    
    <content type="html"><![CDATA[<p>找工作也有一周了，简单写下基础的面试题吧。<br><a id="more"></a></p>
<p><a href="https://juejin.im/post/5a94a8ca6fb9a0635c049e67" target="_blank" rel="external">题目来源</a></p>
<h1 id="基本功"><a href="#基本功" class="headerlink" title="基本功"></a>基本功</h1><h2 id="面向对象的特征："><a href="#面向对象的特征：" class="headerlink" title="面向对象的特征："></a>面向对象的特征：</h2><p>封装：就是把过程和数据包围起来,对数据的访问只能通过特定的界面，<br>继承：一种联结类的层次模型,并且允许和鼓励类的重用,对象的一个新类可以从现有的类中派生，<br>多态：是指允许不同类的对象对同一消息做出响应，方法的重写,重载与动态链接构成多态性。</p>
<h2 id="final-finally-finalize-的区别："><a href="#final-finally-finalize-的区别：" class="headerlink" title="final, finally, finalize 的区别："></a>final, finally, finalize 的区别：</h2><p>final—修饰符（关键字）如果一个类被声明为final，不能再派生出子类，不能被继承。将变量或方法声明为final，可以保证它们在使用中不被改变。被声明为final的变量必须在声明时给定初值，不可修改。被声明为final的方法也同样只能使用，不能重载，<br>finally—再异常处理时提供 finally 块来执行任何清除操作，<br>finalize—方法名。Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。</p>
<h2 id="int-和-Integer-有什么区别："><a href="#int-和-Integer-有什么区别：" class="headerlink" title="int 和 Integer 有什么区别："></a>int 和 Integer 有什么区别：</h2><p>Ingeter是int的包装类，int的初值为0，Ingeter的初值为null，引入了自动装箱/拆箱机制，使得二者可以相互转换。</p>
<h2 id="重载和重写的区别："><a href="#重载和重写的区别：" class="headerlink" title="重载和重写的区别："></a>重载和重写的区别：</h2><p>override（重写）方法名、参数、返回值相同，<br>overload（重载）参数类型、个数、顺序至少有一个不相同。</p>
<h2 id="抽象类和接口有什么区别："><a href="#抽象类和接口有什么区别：" class="headerlink" title="抽象类和接口有什么区别："></a>抽象类和接口有什么区别：</h2><p>接口和抽象类都是继承树的上层，都是上层的抽象层，都不能被实例化，都能包含抽象的方法，<br>在抽象类中可以写非抽象的方法，接口中只能有抽象的方法，<br>一个类只能继承一个直接父类，这个父类可以是具体的类也可是抽象类；但是一个类可以实现多个接口。</p>
<h2 id="说说反射的用途及实现："><a href="#说说反射的用途及实现：" class="headerlink" title="说说反射的用途及实现："></a>说说反射的用途及实现：</h2><p>Java反射机制主要提供了以下功能：在运行时构造一个类的对象；判断一个类所具有的成员变量和方法；调用一个对象的方法；生成动态代理。</p>
<h2 id="说说自定义注解的场景及实现："><a href="#说说自定义注解的场景及实现：" class="headerlink" title="说说自定义注解的场景及实现："></a>说说自定义注解的场景及实现：</h2><p>@Override注解用于告知编译器被注解元素是对父类的重写，<br>@Override注解不是必须的，更多的是用于防止重写错误，<br>@SuppressWarnings注解用于告知编译器忽略特定类型的告警信息，<br>类型注解的引入是为了提高对Java程序的分析，以确保增强对代码的类型检查，元注解是指被用于定义其他注解的注解。</p>
<h2 id="HTTP-请求的-GET-与-POST-方式的区别："><a href="#HTTP-请求的-GET-与-POST-方式的区别：" class="headerlink" title="HTTP 请求的 GET 与 POST 方式的区别："></a>HTTP 请求的 GET 与 POST 方式的区别：</h2><ol>
<li>最直观的就是语义上的区别，get用于获取数据，post用于提交数据，</li>
<li>get参数有长度限制（受限于url长度，具体的数值取决于浏览器和服务器的限制），而post无限制，</li>
<li>get能被缓存，post不能，</li>
<li>get数据在url可见，post不能，</li>
<li>post更安全，不会存在服务器日志中。</li>
</ol>
<h2 id="session-与-cookie-区别："><a href="#session-与-cookie-区别：" class="headerlink" title="session 与 cookie 区别："></a>session 与 cookie 区别：</h2><ol>
<li>session 在服务器端，cookie 在客户端（浏览器），</li>
<li>session 默认被存在在服务器的一个文件里（不是内存），</li>
<li>session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id），</li>
<li>一般情况，登录信息等重要信息存储在session中，其他信息存储在cookie中，cookie目的可以跟踪会话，也可以保存用户喜好或者保存用户名密码，session用来跟踪会话。</li>
</ol>
<h2 id="JDBC-流程："><a href="#JDBC-流程：" class="headerlink" title="JDBC 流程："></a>JDBC 流程：</h2><ol>
<li>加载JDBC驱动程序</li>
<li>提供JDBC连接的URL  </li>
<li>创建数据库的连接  </li>
<li>创建一个Statement    </li>
<li>执行SQL语句 </li>
<li>处理结果  </li>
<li>关闭JDBC对象</li>
</ol>
<h2 id="SpringMVC的原理："><a href="#SpringMVC的原理：" class="headerlink" title="SpringMVC的原理："></a>SpringMVC的原理：</h2><ol>
<li>首先用户发出请求，请求到达SpringMVC的前端控制器（DispatcherServlet），</li>
<li>前端控制器根据用户的url，请求处理器映射器(HandlerMapping)查找匹配该url的handler，并返回一个执行链(HandlerExecutionChain)，</li>
<li>前端控制器再请求处理器适配器(HandlerAdapter)调用相应的handler进行处理并返回给前端控制器一modelAndView，  </li>
<li>前端控制器再请求视图解析器(ViewResolver)对返回的逻辑视图进行解析，</li>
<li>最后前端控制器将返回的视图进行渲染并把数据装入到request域，返回给用户。</li>
</ol>
<h2 id="equals-与-的区别"><a href="#equals-与-的区别" class="headerlink" title="equals 与 == 的区别:"></a>equals 与 == 的区别:</h2><ol>
<li>==是判断两个变量或实例是不是指向同一个内存空间,equals是判断两个变量或实例所指向的内存空间的值是不是相同，</li>
<li>==是指对内存地址进行比较,equals()是对字符串的内容进行比较，</li>
<li>==指引用是否相同,equals()指的是值是否相同。</li>
</ol>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="List-Set-Map-区别："><a href="#List-Set-Map-区别：" class="headerlink" title="List Set Map 区别："></a>List Set Map 区别：</h2><p>List,Set都是继承自Collection接口，Map则不是，<br>List特点：元素有放入顺序，元素可重复 ，<br>Set特点：元素无放入顺序，元素不可重复，<br>Map 跟 Set 一样对元素进行无序存储，但其某些实现类对元素进行了排序。比如，TreeMap 依据键对其中的元素进行升序排序而 LinkedHashMap 则按照每个元素的插入次序进行排序。</p>
<p>List 允许任意数量的空值，<br>Set 最多允许一个空值的出现，<br>Map 只允许出现一个空键但允许任意数量的空值。</p>
<p>Set 检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。，<br>List 和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。</p>
<h2 id="ArrayList-与-Vector-区别："><a href="#ArrayList-与-Vector-区别：" class="headerlink" title="ArrayList 与 Vector 区别："></a>ArrayList 与 Vector 区别：</h2><ol>
<li>Vector是线程安全的，ArrayList不是线程安全的，</li>
<li>ArrayList在底层数组不够用时在原来的基础上扩展0.5倍，Vector是扩展1倍。</li>
</ol>
<h2 id="HashMap-Hashtable-区别："><a href="#HashMap-Hashtable-区别：" class="headerlink" title="HashMap Hashtable 区别："></a>HashMap Hashtable 区别：</h2><p>Hashtable是线程安全的，HashMap非线程安全，基于哈希表，效率要高于HashTable，HashMap允许空键值，而HashTable不允许，<br>TreeMap：非线程安全，基于红黑树实现，适用于按自然顺序或自定义顺序遍历键(key)。</p>
<p>HashMap：适用于Map中插入、删除和定位元素，<br>HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的。</p>
<h2 id="HashSet-和-HashMap-区别："><a href="#HashSet-和-HashMap-区别：" class="headerlink" title="HashSet 和 HashMap 区别："></a>HashSet 和 HashMap 区别：</h2><p><img src="/img/hash表.png" alt="图片名称" title=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;找工作也有一周了，简单写下基础的面试题吧。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>一八展望</title>
    <link href="http://yoursite.com/2018/02/26/%E4%B8%80%E5%85%AB%E5%B1%95%E6%9C%9B/"/>
    <id>http://yoursite.com/2018/02/26/一八展望/</id>
    <published>2018-02-26T12:53:42.000Z</published>
    <updated>2018-05-17T05:55:59.838Z</updated>
    
    <content type="html"><![CDATA[<p>一八展望<br><a id="more"></a></p>
<p>开始写这个博客的时候，想的是只写技术不写其他，到这篇之前也的确是这样的，当然，我承认水平还远远不够，不过今天想来想去还是对一八年做个展望吧。</p>
<p>顺便也总结下一七年，因为考研，到今天为止大半年没学技术了，博客也停更到现在，很可惜考研基本上失利了，期间阴差阳错谈了个女朋友，避免了大学没谈恋爱的尴尬。因为考研，放弃了很多，得到了很多，具体就不细说了。</p>
<p>关于一八，昨儿发了条微博：想勤奋一点，努力一点，专注一点，多学一点，少睡一点。这是真切的感受，一直觉得自己过于懒散了。然后就在这里列个一八年的目标吧，找一份工作，找个好的城市安定下来。看书，每天时间不少于两小时，看技术书，写博客，频率至少在一周一篇，看杂书，一年争取看十五到二十本书，包括技术书。继续健身，一周坚持不少于三次。下半年二战。就酱。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一八展望&lt;br&gt;
    
    </summary>
    
      <category term="杂" scheme="http://yoursite.com/categories/%E6%9D%82/"/>
    
    
      <category term="杂" scheme="http://yoursite.com/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>MBG使用手册</title>
    <link href="http://yoursite.com/2017/06/11/MBG%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2017/06/11/MBG使用手册/</id>
    <published>2017-06-11T12:09:20.000Z</published>
    <updated>2018-05-17T05:55:59.823Z</updated>
    
    <content type="html"><![CDATA[<p>Mybaits Generator 使用手册<br><a id="more"></a></p>
<h2 id="Generator工具简介"><a href="#Generator工具简介" class="headerlink" title="Generator工具简介"></a>Generator工具简介</h2><p>自动生成底层模型类、Dao接口类甚至Mapping映射文件。</p>
<h2 id="数据库建表"><a href="#数据库建表" class="headerlink" title="数据库建表"></a>数据库建表</h2><p><img src="/img/数据库1.png" alt="图片名称" title=""><br><img src="/img/数据库2.png" alt="图片名称" title=""></p>
<h2 id="下载对应jar包"><a href="#下载对应jar包" class="headerlink" title="下载对应jar包"></a>下载对应jar包</h2><p><img src="/img/jar包.png" alt="图片名称" title=""></p>
<h2 id="generatorConfig-xml配置文件书写"><a href="#generatorConfig-xml配置文件书写" class="headerlink" title="generatorConfig.xml配置文件书写"></a>generatorConfig.xml配置文件书写</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  
&lt;!DOCTYPE generatorConfiguration  
  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;  
  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;  
&lt;generatorConfiguration&gt;  
&lt;!-- 数据库驱动--&gt;  
    &lt;classPathEntry  location=&quot;mysql-connector-java-3.1.12-bin.jar&quot;/&gt;  
    &lt;context id=&quot;DB2Tables&quot;  targetRuntime=&quot;MyBatis3&quot;&gt;  
        &lt;commentGenerator&gt;  
            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;  
            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;  
            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;  
        &lt;/commentGenerator&gt;  
        &lt;!--数据库链接URL，用户名、密码 --&gt;  
        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost/test&quot; userId=&quot;root&quot; password=&quot;&quot;&gt;  
        &lt;/jdbcConnection&gt;  
        &lt;javaTypeResolver&gt;  
            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;  
        &lt;/javaTypeResolver&gt;  
        &lt;!-- 生成模型的包名和位置--&gt;  
        &lt;javaModelGenerator targetPackage=&quot;model&quot; targetProject=&quot;src&quot;&gt;  
            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;  
            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;  
        &lt;/javaModelGenerator&gt;  
        &lt;!-- 生成映射文件的包名和位置--&gt;  
        &lt;sqlMapGenerator targetPackage=&quot;mapping&quot; targetProject=&quot;src&quot;&gt;  
            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;  
        &lt;/sqlMapGenerator&gt;  
        &lt;!-- 生成DAO的包名和位置--&gt;  
        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;dao&quot; targetProject=&quot;src&quot;&gt;  
            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;  
        &lt;/javaClientGenerator&gt;  
        &lt;!-- 要生成哪些表--&gt;  
        &lt;table tableName=&quot;test&quot; domainObjectName=&quot;Test&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;  
    &lt;/context&gt;  
&lt;/generatorConfiguration&gt;  
</code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>进入命令行界面，mybatis-generator-core-1.3.2\lib目录下运行</p>
<pre><code>Java -jar mybatis-generator-core-1.3.2.jar -configfile generatorConfig.xml -overwrite
</code></pre><p><img src="/img/运行成功.png" alt="图片名称" title=""></p>
<h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><p><img src="/img/生成文件.png" alt="图片名称" title=""></p>
<p>Test.java 实体类：<br><img src="/img/生成1.png" alt="图片名称" title=""></p>
<p>TestMapper.java 映射接口：<br><img src="/img/生成2.png" alt="图片名称" title=""></p>
<p>TestMapper.xml 具体sql语句：<br><img src="/img/生成3.png" alt="图片名称" title=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybaits Generator 使用手册&lt;br&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Core Java I 学习笔记(七)</title>
    <link href="http://yoursite.com/2017/04/22/Core-Java-I-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%83/"/>
    <id>http://yoursite.com/2017/04/22/Core-Java-I-学习笔记-七/</id>
    <published>2017-04-22T11:35:18.000Z</published>
    <updated>2018-05-17T05:55:59.809Z</updated>
    
    <content type="html"><![CDATA[<p>集合<br><a id="more"></a></p>
<h2 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h2><p>与现代的数据结构类库的常见情况一样，Java集合类库也将<strong>接口（interface）</strong>与<strong>实现（implementation）</strong>分离。</p>
<p>在Java类库中，集合类的基本接口是Collection接口。有两个基本方法：</p>
<pre><code>public interface Collection&lt;E&gt;{
    boolean add(E element);
    Iterator&lt;E&gt; iterator;
    ...
}
</code></pre><ul>
<li>add方法用于向集合中添加元素。</li>
<li>iterator方法用于返回一个实现了Iterator接口的对象。可以使用这个迭代器对象依次访问集合中的元素。</li>
</ul>
<p>Iterator接口包含4个方法：</p>
<pre><code>public interface Iterator&lt;E&gt;{
    E next();
    boolean hasNext();
    void remove;
    default void forEachRemaining(Consumer&lt;? super E&gt; action);
}
</code></pre><p>remove方法将会删除上次调用next方法时返回的元素，next和remove方法的调用具有互相依赖性。如果调用remove之前没有调用next将是非法的。</p>
<p>Java集合框架为不同类型的集合定义了大量接口：</p>
<p><img src="/img/集合框架的接口.png" alt="图片名称" title=""></p>
<h2 id="具体的集合"><a href="#具体的集合" class="headerlink" title="具体的集合"></a>具体的集合</h2><table>
<thead>
<tr>
<th style="text-align:center">集合类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ArrayList</td>
<td style="text-align:center">一种可以动态增长和缩减的索引序列</td>
</tr>
<tr>
<td style="text-align:center">LinkedList</td>
<td style="text-align:center">一种可以在任何位置进行高效地插入和删除操作的有序序列</td>
</tr>
<tr>
<td style="text-align:center">ArrayDeque</td>
<td style="text-align:center">一种用循环数组实现的双端队列</td>
</tr>
<tr>
<td style="text-align:center">HashSet</td>
<td style="text-align:center">一种没有重复元素的无序集合</td>
</tr>
<tr>
<td style="text-align:center">TreeSet</td>
<td style="text-align:center">一种有序集</td>
</tr>
<tr>
<td style="text-align:center">EnumSet</td>
<td style="text-align:center">一种包含枚举类型值的集</td>
</tr>
<tr>
<td style="text-align:center">LinkedHashSet</td>
<td style="text-align:center">一种可以记住元素插入次序的集</td>
</tr>
<tr>
<td style="text-align:center">PriorityQueue</td>
<td style="text-align:center">一种允许高效删除最小元素的集合</td>
</tr>
<tr>
<td style="text-align:center">HashMap</td>
<td style="text-align:center">一种存储键/值关联的数据结构</td>
</tr>
<tr>
<td style="text-align:center">TreeMap</td>
<td style="text-align:center">一种键值有序排列的映射表</td>
</tr>
<tr>
<td style="text-align:center">EnumMap</td>
<td style="text-align:center">一种键值属于枚举类型的映射表</td>
</tr>
<tr>
<td style="text-align:center">LinkedHashMap</td>
<td style="text-align:center">一种可以记住键/值项添加次序的映射表</td>
</tr>
<tr>
<td style="text-align:center">WeakHashMap</td>
<td style="text-align:center">一种其值无用武之地后可以被垃圾回收器回收的映射表</td>
</tr>
<tr>
<td style="text-align:center">IdentityHashMap</td>
<td style="text-align:center">一种用==而不是equals比较键值的映射表</td>
</tr>
</tbody>
</table>
<p><img src="/img/集合框架中的类.png" alt="图片名称" title=""></p>
<p>Notes：<br>在java中，所有链表实际上都是<strong>双向链接（doubly linked）</strong>，即每个结点还存放着前驱结点的引用。<br><strong>散列表（hash table）</strong>可以快速地查找说需要的对象，散列表为每个对象计算一个整数，称为<strong>散列码（hash code）</strong>。<br>TreeSet类与散列集十分相似，不过它比散列集有所改进。树集是一个<strong>有序集合（sorted collection）</strong>。可以以任意顺序将元素插入到集合中。</p>
<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>集是一个集合，它可以快速地查找现有的元素。但是，要查看一个元素，需要有要查找元素的精确副本。通常，我们知道某些键的信息，并想要查找与之对应的元素。<strong>映射（map）</strong>数据结构就是为此设计的。映射用来存放键/值对。</p>
<h3 id="基本映射操作"><a href="#基本映射操作" class="headerlink" title="基本映射操作"></a>基本映射操作</h3><p>Java类库为映射提供了两个通用的实现：HashMap和TreeMap。<br>散列映射对键进行散列，树映射用键的整体顺序对元素进行排序，并将其组织成搜索树。散列或比较函数只能作用于键。与键关联的值不能进行散列或比较。<br>与集一样，散列稍微快一点，如果不需要按照排列顺序访问键，最好选择散列。</p>
<p>下列代码键为存储的员工信息建立一个散列映射：</p>
<pre><code>Map&lt;String, Employee&gt; staff= new HashMap&lt;&gt;();
Employee harry= new Employee(&quot;Harry Hacker&quot;);
staff.put(&quot;987-98-9996&quot;,harry);
...
</code></pre><p>每当往映射中添加对象时，必须同时提供一个键。在这里，键是一个字符串，对应的值是Employee对象。<br>要想检索一个对象，必须使用一个键。</p>
<pre><code>String id= &quot;987-98-9996&quot;;
e= staff.get(id); //get harry
</code></pre><p>如果在映射中没有对应的值，get将返回null。<br>remove方法用于从映射中删除给定键对应的元素。size方法用于返回映射中的元素数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;集合&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Core Java I 学习笔记(六)</title>
    <link href="http://yoursite.com/2017/04/15/Core-Java-I-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/"/>
    <id>http://yoursite.com/2017/04/15/Core-Java-I-学习笔记-六/</id>
    <published>2017-04-15T11:31:01.000Z</published>
    <updated>2018-05-17T05:55:59.817Z</updated>
    
    <content type="html"><![CDATA[<p>泛型<br><a id="more"></a></p>
<h2 id="为什么要使用泛型程序设计"><a href="#为什么要使用泛型程序设计" class="headerlink" title="为什么要使用泛型程序设计"></a>为什么要使用泛型程序设计</h2><p><strong>泛型程序设计</strong>意味着编写的代码可以被很多不同类型的对象所重用。</p>
<h3 id="类型参数的好处"><a href="#类型参数的好处" class="headerlink" title="类型参数的好处"></a>类型参数的好处</h3><p>在Java增加泛型类之前，泛型程序设计使用继承实现的。ArayList类只维护一个Object引用的数组：</p>
<pre><code>public class ArrayList
{
    private Object[] elementData;
    ...
    public Object get(int i){...}
    public void add(Object o){...}
}
</code></pre><p>这种方法有两个问题</p>
<ul>
<li>但获取一个值时必须进行强制类型转换</li>
<li>没有错误检查，可以向数组列表添加任何类的对象。</li>
</ul>
<p>泛型提供了一个更好的解决方案：<strong>类型参数（type parameters）</strong>。ArrayList类有一个类型参数来只是元素类型：</p>
<pre><code>ArrayList&lt;String&gt; files= new ArrayList&lt;&gt;();
</code></pre><p>参数类型的魅力在于：使得程序具有更好的可读性和安全性。</p>
<h2 id="定义简单泛型类"><a href="#定义简单泛型类" class="headerlink" title="定义简单泛型类"></a>定义简单泛型类</h2><p>一个<strong>泛型类（generic class）</strong>就是具有一个或多个类型变量的类。</p>
<pre><code>public class Pair&lt;T&gt;
{
    private T first;
    private T second;

    public Pair() {first = null; second = null;}
    public Pair(T first, T secont){this.first = first; this.second = secont;}

    public T getFirst(){return first;}
    public T getSecont(){return second;}

    public void setFirst(T newValue){first= newValue;}
    public void setSecot(T newValue){second= newValue;}
}
</code></pre><p>泛型类可以有多个类型变量。如：</p>
<pre><code>public class Pair&lt;T, U&gt;{...}
</code></pre><p>用具体的类型替换类型变量就可以实例化泛型类型，如：</p>
<pre><code>Pair&lt;String&gt;
</code></pre><p>可以将结果想象成带有构造器的普通类：</p>
<pre><code>Pair&lt;String&gt;()
Pair&lt;String&gt;(String, String)
</code></pre><p>和方法：</p>
<pre><code>String getFirst()
String getSecond()
void setFirst(String)
void setSecond(String)
</code></pre><p>换句话说，泛型类可以看作普通类的工厂。</p>
<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><pre><code>class ArrayAlg{
    public void &lt;T&gt; T getMiddle(T...a){
        return a[a.length / 2];
    }
}
</code></pre><p>类型变量放在修饰符的后面，放在类型的前面。泛型方法可以定义在普通类中，也可以定义在泛型类中。但调用一个泛型方法时，在方法名前的尖括号中放入具体的类型：</p>
<pre><code>String middle= ArrayAlg.&lt;String&gt;getMiddle(&quot;John&quot;,&quot;Q.&quot;,&quot;Public&quot;);
</code></pre><p>一般，方法调用中可以省略<string>类型参数。</string></p>
<h2 id="类型变量的限定"><a href="#类型变量的限定" class="headerlink" title="类型变量的限定"></a>类型变量的限定</h2><p>有时，类或方法需要对类型变量加以约束：</p>
<pre><code>public static &lt;T extends Comparable&gt; T min(T[] a)....
</code></pre><p>现在，泛型的min方法只能被实现了Comparable接口的类的数组调用。<br>一个类型变量或通配符可以有多个限定：</p>
<pre><code>T extends Comparable &amp; Serializable
</code></pre><p>注：java中可以根据需要拥有多个接口超类型，但限定中至多有一个类。如果一个类作为限定，必须是限定列表中的第一个。</p>
<h2 id="泛型代码和虚拟机"><a href="#泛型代码和虚拟机" class="headerlink" title="泛型代码和虚拟机"></a>泛型代码和虚拟机</h2><p>关于Java泛型转换的事实：</p>
<ul>
<li>虚拟机中没有泛型，只有普通的类和方法；</li>
<li>所以的类型参数都用它们的限定类型替换；</li>
<li>桥方法被合成来保护多态；</li>
<li>为保持类型安全性，必要时插入强制类型转换。</li>
</ul>
<h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><p>无论何时定义一个泛型类型，都自动提供了一个相应的<strong>原始类型（raw type）</strong>。原始类型的名字就是删除类型参数后的泛型类型名。<strong>擦除（erased）</strong>类型变量，并替换为限定类型（无限定的变量用Object）。</p>
<p>如，Pair<t>的原始类型如下：</t></p>
<pre><code>public class Pair
{
    private Object first;
    private Object second;

    public Pair() {first = null; second = null;}
    public Pair(Object first, Object secont){this.first = first; this.second = secont;}

    public Object getFirst(){return first;}
    public Object getSecont(){return second;}

    public void setFirst(Object newValue){first= newValue;}
    public void setSecot(Object newValue){second= newValue;}
}
</code></pre><h2 id="约束与局限性"><a href="#约束与局限性" class="headerlink" title="约束与局限性"></a>约束与局限性</h2><ul>
<li>不能用基本类型实例化类型参数；</li>
<li>运行时类型查询只适用于原始类型；</li>
<li>varargs警告；</li>
<li>不能实例化类型变量；</li>
<li>不能构造泛型数组；</li>
<li>泛型类的静态上下文中类型变量无效；</li>
<li>不能抛出或捕获泛型类的实例；</li>
<li>可以消除对受查异常的检查；</li>
<li>注意擦除后的冲突。</li>
</ul>
<h2 id="泛型类型的继承规则"><a href="#泛型类型的继承规则" class="headerlink" title="泛型类型的继承规则"></a>泛型类型的继承规则</h2><ul>
<li>Manager继承Employee，但Pair &lt; Employee &gt;与Pair &lt; Manager &gt;没有什么联系。</li>
<li>永远可以将参数化类型转换为一个原始类型。</li>
<li>泛型类可以扩展或实现其他的泛型类。</li>
</ul>
<h2 id="通配符类型"><a href="#通配符类型" class="headerlink" title="通配符类型"></a>通配符类型</h2><h3 id="通配符概念"><a href="#通配符概念" class="headerlink" title="通配符概念"></a>通配符概念</h3><p>通配符类型中，允许类型参数变化：</p>
<pre><code>Pair &lt;? extends Employee&gt;
</code></pre><p>表示任何泛型Pair类型，它的类型参数是Employee的子类。</p>
<h3 id="通配符的超类型限定"><a href="#通配符的超类型限定" class="headerlink" title="通配符的超类型限定"></a>通配符的超类型限定</h3><pre><code>? super Manager
</code></pre><p>这个通配符限制为Manager的所有超类型。可以为方法提供参数，但不能使用返回值。</p>
<pre><code>void setFirst(? super Manager)
? super Manager getFirst()
</code></pre><p>这不是真正的Java语法，但可以看出编译器知道什么，编译器无法知道setFirst方法的具体类型，只能传递Manager类型的对象，或某个子类型对象。调用getFirst，不能保证返回对象的类型。只能把它赋给一个Object。</p>
<h3 id="无限定通配符"><a href="#无限定通配符" class="headerlink" title="无限定通配符"></a>无限定通配符</h3><p>类型Pair&lt;?&gt;有以下方法：</p>
<pre><code>? getFirst()
void setFirst(?)
</code></pre><p>getFirst的返回值只能赋给一个Object。setFirst方法不能被调用。</p>
<h3 id="通配符捕获"><a href="#通配符捕获" class="headerlink" title="通配符捕获"></a>通配符捕获</h3><p>通配符不是类型变量，因此，不能在编写代码中使用”?“作为一种类型。可以通过写一个辅助函数解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;泛型&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Core Java I 学习笔记(五)</title>
    <link href="http://yoursite.com/2017/04/08/Core-Java-I-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94/"/>
    <id>http://yoursite.com/2017/04/08/Core-Java-I-学习笔记-五/</id>
    <published>2017-04-08T11:46:50.000Z</published>
    <updated>2018-05-17T05:55:59.815Z</updated>
    
    <content type="html"><![CDATA[<p>接口，lambda表达式与内部类<br><a id="more"></a></p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在Java中，接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。<br>接口中的所有方法自动地属于public，接口绝不能含有实例域。<br>实现接口时，必须把方法声明为public。</p>
<p>为了让类实现一个接口，通常需要下面两个步骤：</p>
<ol>
<li>将类声明为实现给定的接口。</li>
<li>对接口中的所有方法进行定义。</li>
</ol>
<pre><code>public interface Comparable
{
    int compareTo(Object other);
}

class Employee implements Comparable
{
    public int compareTo(Object otherObject)
    {
        Employee other= (Employee) otherObject;
        return Double.compare(salary, other.salary);
    }
}
</code></pre><h3 id="接口的特性"><a href="#接口的特性" class="headerlink" title="接口的特性"></a>接口的特性</h3><p>接口不是类，不能使用new运算符实例化一个接口：</p>
<pre><code>x= new Comparable(..); //ERROR
</code></pre><p>然而，尽管不能构造接口的对象，却能声明接口的变量：</p>
<pre><code>Comparable x; //OK
</code></pre><p>接口变量必须应用实现了接口的类对象：</p>
<pre><code>x= new Employee(..); //OK 
</code></pre><p>接口中不能包含实例域或静态方法，却可以包含常量。<br>与接口中的方法都自动被设置为public一样，接口中的域将被自动设为public static final。<br>每个类只能拥有一个超类，却能实现多个接口。使用逗号将实现的各个接口分隔开。</p>
<pre><code>class Employee implements Cloneable,Comparable
</code></pre><h3 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h3><p>使用抽象类表示通用属性存在一个问题：每个类只能扩展于一个类。<br>Java不支持多继承，而接口可以提供多重继承的大多数好处，同时避免多重继承的复发性和低效性。</p>
<h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>Java面向对象，不能直接传递代码段，必须构造一个对象，这个对象的类需要有一个方法能包含所需的代码。</p>
<p>lambda表达式就是一个代码块，以及必须传入代码的变量范围。</p>
<pre><code>(String first, String second)
    -&gt; first.length - second.length
</code></pre><p>以上时一种lambda表达式形式：参数，箭头(-&gt;)以及一个表达式。如果代码要完成的计算无法放在一个表达式中，就可以像写方法一样，把这些代码放进{}中，并包含显式的return语句。如：</p>
<pre><code>(String first, String second) -&gt;
    {
        if(first.length() &lt; second.length()) return -1;
        else if(first.length() &gt; second.length()) return 1;
        else return 0;
    }
</code></pre><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p><strong>内部类</strong>是定义在另一个类中的类。</p>
<ul>
<li>内部类方法可以访问该类定义所在的作用域中的数据，包括私有的数据。</li>
<li>内部类可以对同一个包中的其他类隐藏起来。</li>
<li>但想要定义一个回调函数且不想编写大量代码时，使用<strong>匿名（anonymous）</strong>内部类比较便捷。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接口，lambda表达式与内部类&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Core Java I 学习笔记(四)</title>
    <link href="http://yoursite.com/2017/04/02/Core-Java-I-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B/"/>
    <id>http://yoursite.com/2017/04/02/Core-Java-I-学习笔记-四/</id>
    <published>2017-04-02T08:31:37.000Z</published>
    <updated>2018-05-17T05:55:59.819Z</updated>
    
    <content type="html"><![CDATA[<p>继承<br><a id="more"></a></p>
<p>利用继承，可以基于已存在的类构造一个新类。继承已存在的类就是复用这些类的方法和域。在此基础上，还可以添加一些新的的方法和域，以满足新的需求。</p>
<h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><h3 id="定义子类"><a href="#定义子类" class="headerlink" title="定义子类"></a>定义子类</h3><p>关键字<strong><em>extends</em></strong>表明正在构造的新类派生于一个已存在的类。已存在的类称为超类（superclass）、基类（base class）或父类（parent class）；新类称为之类（subclass）、派生类（derived class）或孩子类（child class）。<br>子类往往比超类拥有的功能更加丰富。</p>
<pre><code>public class Manager extends Employee //继承Employee类来定义Manager类
{
    添加方法和域
}
</code></pre><h3 id="覆盖方法"><a href="#覆盖方法" class="headerlink" title="覆盖方法"></a>覆盖方法</h3><p>如果子类，超类中存在同名方法，子类中默认调用本身存在的方法，称为<strong>覆盖</strong>。<br>如果需要调用超类中的同名方法，可以使用<strong><em>super</em></strong>关键字：</p>
<pre><code>super.方法
</code></pre><p><strong>注</strong>：super不是一个对象的引用，不能将super赋给另一个对象变量，它只是一个指示编译器调用超类方法的特殊关键字。与this不同，this有两个用途，一是引用隐式参数，二是调用该类其他的构造器。super也有两个用途，一是调用超类方法，二是调用超类构造器。</p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>一个对象变量可以指示多种实际类型的现象被称为<strong>多态（polymorphism）</strong>，在运行时能够自动地调用哪个方法的现象称为<strong>动态绑定（dynamic binding）</strong>。</p>
<pre><code>Employee e;
e= new Employee(..);
e= new Manager(..);
</code></pre><p>Java中，对象变量是多态的。一个Employee变量既可以引用一个Employee类对象，也可以引用一个Employee类的任何一个子类的对象。（不能将超类的引用赋给之类变量）</p>
<h3 id="理解方法调用"><a href="#理解方法调用" class="headerlink" title="理解方法调用"></a>理解方法调用</h3><p>假设调用x.f(args)，隐式参数x声明为类C的一个对象。</p>
<ol>
<li>编译器查看对象的声明类型和方法名。至此，编译器获得所有可能被调用的方法。</li>
<li>编译器查看调用方法时提供的参数类型，也称<strong>重载解析（overloading resolution）</strong>。至此，编译器获取需要调用的方法名字和参数类型。</li>
<li>如果是private、static、final方法或者构造器，那么编译器将可以准确地知道应该调用哪个方法，也称<strong>静态绑定（static binding）</strong>。与此对应的是，调用的方法依赖于隐式参数的实际类型，并在运行时实现动态绑定。</li>
<li>但程序运行，并且采用动态绑定调用方法时，虚拟机一定调用与x所引用对象的实际类型最合适的那个类的方法。</li>
</ol>
<h3 id="阻止继承：final类和方法"><a href="#阻止继承：final类和方法" class="headerlink" title="阻止继承：final类和方法"></a>阻止继承：final类和方法</h3><p>不允许扩展的类被称为final类。使用final修饰符声明。类的特定方法也可以被声明为final。如果这样，子类就不能覆盖整个方法。final类中所有方法自动变成final方法。</p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>如果自下而上在类的继承层次结构中上移，位于上层的类更具有通用性，甚至可能更加抽象。从某种角度看，祖先类更加通用，人们只将它作为派生其他类的基类，而不作为想使用的特定的实例类。</p>
<p>包含一个或多个抽象方法的类本身必须被声明为抽象的。抽象方法不必实现。抽象类不能被实例化。</p>
<p>抽象方法充当着占位的角色，它们的具体实现在子类中。拓展实体类可以有两种选择。一种是在抽象类中定义抽象类方法或不定义抽象类方法，这样就必须将子类也标记为抽象类；另一种是定义全部的抽象方法，这样一来，之类就不是抽象的了。</p>
<h2 id="Object：所有类的超类"><a href="#Object：所有类的超类" class="headerlink" title="Object：所有类的超类"></a>Object：所有类的超类</h2><p>Object类是Java中所有类的始祖，每个类都是由它拓展而来。</p>
<h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p>判断两个对象是否具有相同的引用。</p>
<h3 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h3><p><strong>散列码（hash code）</strong>是由对象导出的一个整数值。散列码没有规律。每个对象都有一个默认的散列码，其值为对象的存储地址。</p>
<h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><p>Object中，toString方法用于返回表示对象值的字符串。</p>
<h2 id="对象包装器"><a href="#对象包装器" class="headerlink" title="对象包装器"></a>对象包装器</h2><p>所有的基本类型都有一个与之对应的类。也称<strong>包装器</strong>。分别是Integer、Long、Float、Double、Short、Byte、Character、Void、Doolean。对象包装器是不可变的，一旦构造了包装器，就不允许更改包装在其中的值。</p>
<h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><p>枚举类型包括有限个命名的值，如：</p>
<pre><code>public enum Size{SMALL,MEDIUM,LARGE,EXTRA_LARGE};
</code></pre><p>实际上，这个声明定义的类型是一个类，它刚好有4个实例，在此尽量不要构造新对象。</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>能够分析类能力的程序称为<strong>反射（reflective）</strong>。反射机制可以用来：</p>
<ul>
<li>在运行时分析类的能力。</li>
<li>在运行时查看对象，例如，编写一个toString方法供所有类使用。</li>
<li>实现通用的数组操作代码。</li>
<li>利用Method对象，这个对象很像C++中的函数指针。</li>
</ul>
<p>在程序运行期间，Java运行时系统始终为所有的对象维护一个被称为运动时的类型标识。这个信息跟踪着每个对象所属的类。虚拟机利用运行时类型信息选择相应的方法执行。Java中用Class类保存这些信息。</p>
<p>反射机制最重要的内容是检查类的结构。<br>查看任意对象的数据域名称和类型：</p>
<ul>
<li>获得对应的Class对象。</li>
<li>通过Class对象调用getDeclaredFields。</li>
</ul>
<h2 id="继承设计技巧"><a href="#继承设计技巧" class="headerlink" title="继承设计技巧"></a>继承设计技巧</h2><ol>
<li>将公共操作和域放在超类</li>
<li>不要使用受保护的域</li>
<li>使用继承实现“is-a”关系</li>
<li>除非所有继承的方法都有意义，否则不要使用继承</li>
<li>在覆盖方法时，不要改变预期的行为</li>
<li>使用多态，而非类型信息</li>
<li>不要过多地使用反射</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继承&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Core Java I 学习笔记(三)</title>
    <link href="http://yoursite.com/2017/03/25/Core-Java-I-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>http://yoursite.com/2017/03/25/Core-Java-I-学习笔记-三/</id>
    <published>2017-03-25T11:10:05.000Z</published>
    <updated>2018-05-17T05:55:59.811Z</updated>
    
    <content type="html"><![CDATA[<p>对象和类<br><a id="more"></a></p>
<h2 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h2><p>Java完全面向对象。</p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类是构造对象的模板或蓝图。</p>
<p><strong>封装（encapsulation，也称数据隐藏）是与对象有关的重要概念。对象中的数据称为实例域（instance field），操作数据的过程称为方法（method）。对于每个特定的类实例（对象）都有一组特定的实例域值。这些值的集合就是这个对象的当前状态（state）。</strong></p>
<p>实现封装的关键在于不然类中的方法直接地访问其他类的实例域。</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象的三个主要特性：</p>
<ol>
<li>对象的行为（behavior）–可以对对象施加哪些操作/方法？</li>
<li>对象的状态（state）–当施加那些方法时，对象如何响应？</li>
<li>对象标识（identity）–如何辨别具有相同行为与状态的不同对象？</li>
</ol>
<h3 id="对象与对象变量"><a href="#对象与对象变量" class="headerlink" title="对象与对象变量"></a>对象与对象变量</h3><p>Java中使用构造器（constructor）构造新实例。构造器是一种特殊的方法，并用构造器初始化对象。<br>构造器的名字与类名相同，想构造一个Date对象，需要在构造器前加上new操作符。如：</p>
<pre><code>new Date();
</code></pre><p>这个表达式构造了一个新对象，这个新对象被初始化为当前的日期和时间。<br>上面的例子中的对象只用了一次，通常希望构造的对象可以多次使用，因此需要将对象存放在一个变量中：</p>
<pre><code>Date birthday= new Date();
</code></pre><p>在对象与对象变量之间存在一个重要区别。如：</p>
<pre><code>Date deadline;// deadline doesn&apos;t refer to any object
</code></pre><p><strong>变量对象deadline可以引用Date类型的对象，当deadline不是一个对象，也没有引用对象，此时不能将任何Date方法应用于这个变量上。简单来说，一个变量对象并没有实际包含一个对象，而仅仅是引用一个对象。java中任何对象变量的值都是对存储在另外一个地方的一个对象的引用。new操作符的返回值也是一个引用。</strong></p>
<h2 id="用户自定义类"><a href="#用户自定义类" class="headerlink" title="用户自定义类"></a>用户自定义类</h2><p>通常，用户自定义类没有main方法，却有自己的实例域和实例方法。如：</p>
<pre><code>class Employee
{
    //instance fields
    private String name;
    private double salary;
    private LocalDat hireDay;

    //constructor
    public Employee(String n,double s,int year,int month,int day)
    {
        name= n;
        salary= s;
        hireDaty= LocalDate.of(year,month,day);
    }

    //a method
    public String getName()
    {
        return name;
    }

    //more methods
    ...
}
</code></pre><h3 id="隐式参数与显示参数"><a href="#隐式参数与显示参数" class="headerlink" title="隐式参数与显示参数"></a>隐式参数与显示参数</h3><p>方法用于操作对象以及存取它们的实例域。如：</p>
<pre><code>public void raiseSalary(double byPercent)
{
    double raise= salary* byPercent/ 100;
    salary+= raise;
}
</code></pre><p>raiseSalary方法有两个参数，第一个称为隐式（implicit）参数，出现在方法名前的Employee类对象。第二个参数位于方法名后面括号中，这是一个显示（explicit）参数。</p>
<p>在每个方法中，关键字this表示隐式参数。如果需要，raiseSalary可以如下编写：</p>
<pre><code>public void raiseSalary(double byPercent)
{
    double raise= this.salary* byPercent/ 100;
    this.salary+= raise;
}
</code></pre><h3 id="final实例域"><a href="#final实例域" class="headerlink" title="final实例域"></a>final实例域</h3><p>可以将实例域定义为final。构建对象时必须初始化这样的域。也就是说，必须确保在每一个构造器执行之后，这个域的值被设置，并且在后面的操作中，不能够再对它进行修改。</p>
<h2 id="静态域与静态方法"><a href="#静态域与静态方法" class="headerlink" title="静态域与静态方法"></a>静态域与静态方法</h2><p>如果将域定义为static，每个类中只有一个这样的域。而每一个对象对于所有的实例域缺都有自己的一份拷贝。</p>
<pre><code>class Employee
{
    private static int nextId= 1;

    private int id;
    ...
}
</code></pre><p>静态变量使用得比较少，当<strong>静态常量</strong>用得比较多。如，Math中</p>
<pre><code>public class Math
{
    ...
    public static final double PI= 3.14159265358979323846;
}
</code></pre><p>在程序中可以采用Math.PI的形式获得这个常量。</p>
<p><strong>静态方法</strong>是一种不能向对象实施操作的方法。可以认为静态方法时没有this参数的方法。如：</p>
<pre><code>public static int getNextId()
{
    return nextId;
}
</code></pre><p>在下面两种情况下使用静态方法：</p>
<ul>
<li>一个方法不需要访问对象状态，其所需参数都是通过显式参数提供。</li>
<li>一个方法只需要访问类的静态域。</li>
</ul>
<h2 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h2><p>在程序设计语言中，将参数传递给方法（函数）分两种。</p>
<ol>
<li><strong>按值调用（call by value）</strong>表示方法接收的是调用者提供的值。</li>
<li><strong>按引用调用（call by reference）</strong>表示方法接收的是调用者提供的变量地址。</li>
</ol>
<p>Java中总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。如：</p>
<pre><code>public static void swap(Employee x,Employee y) // doesn&apos;t work
{
    Employee temp= x;
    x= y;
    y= temp;
}
</code></pre><p>如果Java采用按引用调用，那么这个方法应该可以实现交换数据的效果：</p>
<pre><code>Employee a= new Employee(&quot;Alice&quot;,..);
Employee b= new Employee(&quot;Bob&quot;,..);
swap(a,v);
//does a now refer to Bob,b to Alice?
</code></pre><p>但方法并没有改变变量a,b中的对象引用。swap方法的参数x,y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝。在方法结束时参数变量x,y被丢弃了，变量a,b仍然引用这个方法调用之前所引用的对象。</p>
<p>实际上，<strong>对象引用是按值传递的</strong>。</p>
<h2 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h2><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>重载（overloading）：方法名相同，参数不同。Java允许重载任何方法。</p>
<h3 id="默认域初始化"><a href="#默认域初始化" class="headerlink" title="默认域初始化"></a>默认域初始化</h3><p>如果构造器中没有显式地给域赋予初值，那么就会被自动赋默认值：数值为0，布尔值为false，对象引用为null。（不推荐，尽量避免，否则影响可读性）</p>
<h3 id="无参构造器"><a href="#无参构造器" class="headerlink" title="无参构造器"></a>无参构造器</h3><p>如果在编写类时没有编写构造器，系统会提供一个无参数构造器，将所有实例域设置为默认值。<br>注：仅当类没有提供任何构造器时，系统才提供默认构造器，如果类中提供了至少一个构造器，但没有提供无参数构造器，则在构造对象时如果没有提供参数就会被视为不合法。</p>
<h2 id="类设计技巧"><a href="#类设计技巧" class="headerlink" title="类设计技巧"></a>类设计技巧</h2><ol>
<li>保证数据私有，不要破坏封装性；</li>
<li>对数据初始化；</li>
<li>不要在类中使用过多基本类型；</li>
<li>将职责过多的类进行分解；</li>
<li>类名和方法名要能够体现它们的职责。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对象和类&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Core Java I 学习笔记(二)</title>
    <link href="http://yoursite.com/2017/03/18/Core-Java-I-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/03/18/Core-Java-I-学习笔记-二/</id>
    <published>2017-03-18T11:45:08.000Z</published>
    <updated>2018-05-17T05:55:59.813Z</updated>
    
    <content type="html"><![CDATA[<p>Java的基本程序设计结构<br><a id="more"></a></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Java中，有三种标记注释的方式。</p>
<ul>
<li>最常用的是//，注释内容从//开始到本行结尾。</li>
</ul>
<pre><code>System.out.println(&quot;We will not use &apos;Hello,World&apos;&quot;);//is this too cute?
</code></pre><ul>
<li>第2种注释</li>
</ul>
<pre><code>/* This is the first sample program in Core Java Chapter 3 */
</code></pre><ul>
<li>第3种注释可以用来自动地生成文档。</li>
</ul>
<pre><code class="bash">/**
 * This is the first sample program <span class="keyword">in</span> Core Java Chapter 3
 * @version 1.01 1997-03-22
 * @author Gary Cornell
 */
</code></pre>
<p> 注：Java中，/**/注释不能嵌套</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p> Java是强类型语言，每个变量声明一种类型。<br> Java中一共有8种基本类型。</p>
<h3 id="整型（4种）"><a href="#整型（4种）" class="headerlink" title="整型（4种）"></a>整型（4种）</h3><table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">存储需求</th>
<th style="text-align:center">取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">4字节</td>
<td style="text-align:center">-2 147 483 648~2 147 483 647</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">2字节</td>
<td style="text-align:center">-32768~32767</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">8字节</td>
<td style="text-align:center">-9 223 372 036 854 775 808~9 223 372 036 854 775 807</td>
</tr>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">1字节</td>
<td style="text-align:center">-128~127</td>
</tr>
</tbody>
</table>
<h3 id="浮点型（2种）"><a href="#浮点型（2种）" class="headerlink" title="浮点型（2种）"></a>浮点型（2种）</h3><table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">存储需求</th>
<th style="text-align:center">取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">4字节</td>
<td style="text-align:center">大约±3.402 823 47E+38F（有效位6~7位）</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">8字节</td>
<td style="text-align:center">大约±1.797 693 134 862 315 70E+308（有效位15位）</td>
</tr>
</tbody>
</table>
<p>注：浮点数值不适用于无法接收舍入误差的金融计算。<br>浮点数值采用二进制系统表示，无法精确地表示分数1/10。</p>
<h3 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h3><p>描述了UTF-16编码中的一个代码单元。建议不要在程序中使用char类型。</p>
<h3 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h3><p>boolean类型有两个值：false和true，用来判定逻辑条件。整型和布尔值之间不能进行互相转换。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>在Java中，每个变量都有一个类型。</li>
<li>声明一个变量后，必须用赋值语句对变量进行显式初始化。</li>
<li><p>变量的声明尽可能靠近变量第一次使用的地方</p>
</li>
<li><p>Java中用final指示常量，表示只能被赋值一次，不能更改。</p>
</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java中使用+ - * /表示加减乘除。<br>当参与/运算的两个操作数都是整数时，表整除，否则表浮点除法。整数的求余用%表示。</p>
<h3 id="数值类型转换"><a href="#数值类型转换" class="headerlink" title="数值类型转换"></a>数值类型转换</h3><p><img src="/img/数值类型转换.png" alt="图片名称" title=""></p>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。</p>
<pre><code>double x= 9.997;
int nx= (int)Math.round(x);
</code></pre><h3 id="括号和运算符级别"><a href="#括号和运算符级别" class="headerlink" title="括号和运算符级别"></a>括号和运算符级别</h3><p><img src="/img/运算符.jpg" alt="图片名称" title=""></p>
<h3 id="枚举类型（详见后）"><a href="#枚举类型（详见后）" class="headerlink" title="枚举类型（详见后）"></a>枚举类型（详见后）</h3><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h3><p>substring可以从一个较大的字符串提取出一个子串。如：</p>
<pre><code>String greeting= &quot;Hello&quot;;
String s= greeting.substring(0,3); //Hel
</code></pre><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p>Java允许使用+号拼接两个字符串。</p>
<pre><code>String expletive= &quot;Expletive&quot;;
String PG13=&quot;deleted&quot;;
String message= expletive + PG13; //Expletivedeleted
</code></pre><h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h3><p>String类没有提供用于修改字符串的方法。<br>而是创建一个新字符串，而不是修改一个代码单元。</p>
<h3 id="检测字符串是否相等"><a href="#检测字符串是否相等" class="headerlink" title="检测字符串是否相等"></a>检测字符串是否相等</h3><p>可以使用equals方法检测两个字符串是否相等。如：</p>
<pre><code>s.equals(t);
</code></pre><p>注：不要用==检测两个字符串是否相等，它只能确定两个字符串是否放在同一个位置上。</p>
<h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><h3 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h3><p>块（即复合语句）是指在一对大括号括起来的若干条简单的Java语句。块决定了变量的作用域，一个块可以嵌套在另一个块中。但是不能在嵌套的两个块中声明同名的变量。</p>
<pre><code>public static void main(String[] args)
{
    int n;
    ...
    {
        int k;
        int n; //Error--can&apos;t redefine n in inner block
        ...
    }
}
</code></pre><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><pre><code>if (condition){
    statement
}else if (condition){
    statement
}else{
    statement
}
</code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><pre><code>while(condition)
{
    statement
}


do
{
    statement
}
while(condition);
</code></pre><h3 id="确定循环"><a href="#确定循环" class="headerlink" title="确定循环"></a>确定循环</h3><pre><code>for(condition)
{
    statement
}
</code></pre><h3 id="多重选择"><a href="#多重选择" class="headerlink" title="多重选择"></a>多重选择</h3><pre><code>switch(choice)
{
    case 1:
        ...
        break;
    case 2:
        ...
        break;
    case 3:
        ...
        break;
    case 4:
        ...
        break;
    default:
        //bad input
        ...
        break;
}
</code></pre><p>注：switch语句将从与选项值相匹配的case标签处开始执行直到遇到break语句，或者执行到switch语句的结束处为止。如果没有相匹配的case标签，而有default字句，就执行这个子句。</p>
<p>case标签可以使常量表达式，枚举常量，还可以是字符串字面量。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="两种声明形式"><a href="#两种声明形式" class="headerlink" title="两种声明形式"></a>两种声明形式</h3><pre><code>int[] a;

或

int a[];
</code></pre><h3 id="for-each-循环"><a href="#for-each-循环" class="headerlink" title="for each 循环"></a>for each 循环</h3><p>可以用来依次处理数组中的每个元素（其他类型的元素集合亦可）。</p>
<pre><code>for (variable : collection ) statement

如:
for(int element : a)
    System.out.println(element);
</code></pre><h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><p>在Java中。允许将一个数组变量拷贝给另一个数组变量。这时，两个变量将引用同一个数组。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java的基本程序设计结构&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux 学习笔记</title>
    <link href="http://yoursite.com/2017/03/15/Linux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/03/15/Linux-学习笔记/</id>
    <published>2017-03-15T05:59:32.000Z</published>
    <updated>2018-05-17T05:55:59.821Z</updated>
    
    <content type="html"><![CDATA[<p>Linux概述<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先安装虚拟机，可以自行搜索VM。<br>下载CentOS的linux系统，我的版本是CentOS-6.7-i386-bin-DVD1。</p>
<p>接下来，依次打开虚拟机–文件–下一步，选择安装盘镜像文件，目录为之前下载的linux系统，确保安装路径有20G的空间，接着点击下一步直至完成（可选择自定义硬件），随后开启此虚拟机，开始安装linux。</p>
<p>安装过程首先选择语言，然后在SOFTWARE SELECTION中选择GNOME DESKTOP，注意，GNOME为图形界面选项，如果采用默认值，安装完成后进入的就是命令行界面。<br>另外还要在INSTALLATION DESTINATION选项中确认一下，然后begin installtation，等待安装期间，创建用户以及设置root密码，完成后等待安装。</p>
<p>完成后点击reboot启动系统，第一次开机会有initial setup of CentOS Linux选项，依次<br>输入“1”，按Enter键<br>输入“2”，按Enter键<br>输入“q”，按Enter键<br>输入“yes”，按Enter键</p>
<p>至此，linux安装完成。</p>
<h2 id="常用Shell命令操作"><a href="#常用Shell命令操作" class="headerlink" title="常用Shell命令操作"></a>常用Shell命令操作</h2><h3 id="“-”-管道"><a href="#“-”-管道" class="headerlink" title="“|” 管道"></a>“|” 管道</h3><p>格式如：命令1|命令2<br>把左边命令1的输出作为右边命令2的输入。</p>
<h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>以其他用户（默认是root）的身份去执行另一个命令。</p>
<h3 id="touch-创建文件，rm-删除文件，"><a href="#touch-创建文件，rm-删除文件，" class="headerlink" title="touch 创建文件，rm 删除文件，"></a>touch 创建文件，rm 删除文件，</h3><pre><code>[cysun_14@promote ~]$ touch blank.txt
[cysun_14@promote ~]$ rm blank.txt
</code></pre><p>【注】：rm有两个常用选项，-f 选项为强制删除，忽略不存在的文件。 -r 选项为递归删除目录及其内容。</p>
<h3 id="mkdir-创建目录，rmdir-删除目录"><a href="#mkdir-创建目录，rmdir-删除目录" class="headerlink" title="mkdir 创建目录，rmdir 删除目录"></a>mkdir 创建目录，rmdir 删除目录</h3><pre><code>[cysun_14@promote ~]$ mkdir firstdir
[cysun_14@promote ~]$ redir firstdir
</code></pre><p>【注】：mkdir 可以使用选项 -p 指示如果要创建的目录的父目录不存在，一并创建。rmdir只能删除空目录。</p>
<h3 id="who-whoami"><a href="#who-whoami" class="headerlink" title="who whoami"></a>who whoami</h3><p>who 可以查看所有正在使用系统的用户的用户名，所用终端，登录时间等，<br>whoami可以查看当前用户信息。</p>
<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>显示文件指定目录。</p>
<h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><p>根据文件名搜索二进制文件、手册页文件或源代码文件。未指定会将三类文件都显示出来。</p>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>cat有两项功能，一是显示文件内容，二是连接合并文件内容。</p>
<h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><p>Visual Interface，UNIX系统中最常用的编辑器。</p>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>将源文件复制到目标文件，或将多个源文件复制到目标目录。</p>
<pre><code>[cysun_14@promote ~]$ cp [选项] ... 源文件 目标文件
</code></pre><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>将源文件重命名为目标文件，或将源文件移动至指定目录。</p>
<pre><code>[cysun_14@promote ~]$ mv [选项] ... 源文件 目标文件
</code></pre><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p>更改文件属主</p>
<pre><code>[cysun_14@promote ~]$ chown [选项]... [所有者][:[组]] 文件...
</code></pre><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><p>更改文件属组</p>
<pre><code>[cysun_14@promote ~]$ chgrp [选项]... 用户组 文件...
</code></pre><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>更改文件权限</p>
<pre><code>[cysun_14@promote ~]$ chmod [选项]... 模式[,模式] 文件...
</code></pre><h2 id="Shell编程基础知识"><a href="#Shell编程基础知识" class="headerlink" title="Shell编程基础知识"></a>Shell编程基础知识</h2><p>运行Linux Shell程序的方法有三种：</p>
<ul>
<li>赋予程序文件可执行权限，直接运行。</li>
<li>调用命令解释器（Shell）解释运行。</li>
<li>使用source命令执行。</li>
</ul>
<p>可执行命令分三种：</p>
<ul>
<li>内部命令。</li>
<li>Shell函数。</li>
<li>外部命令。</li>
</ul>
<p>变量赋值方式： 变量名=变量值,<br>“=”两边不能有空格，引用变量时，在变量名前加“$”符号。</p>
<pre><code>[cysun_14@promote ~]$ str=&quot;Hello, world&quot;
[cysun_14@promote ~]$ echo $str
</code></pre><p>控制结构类似C,JAVA,略。</p>
<p>Shell函数</p>
<pre><code>[funciton] 函数名()
{
    命令表
    return[n]
}
</code></pre><p>n值是退出函数时的退出状态，未指定n默认取最后一个命令的退出状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux概述&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
