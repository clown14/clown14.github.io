<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Onion&#39;blog</title>
  <subtitle>write onece use anywhere</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-19T13:03:21.154Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>onion</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Core Java I 学习笔记(二)</title>
    <link href="http://yoursite.com/2017/03/18/Core-Java-I-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/03/18/Core-Java-I-学习笔记-二/</id>
    <published>2017-03-18T11:45:08.000Z</published>
    <updated>2017-03-19T13:03:21.154Z</updated>
    
    <content type="html"><![CDATA[<p>Java的基本程序设计结构<br><a id="more"></a></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Java中，有三种标记注释的方式。</p>
<ul>
<li>最常用的是//，注释内容从//开始到本行结尾。</li>
</ul>
<pre><code>System.out.println(&quot;We will not use &apos;Hello,World&apos;&quot;);//is this too cute?
</code></pre><ul>
<li>第2种注释</li>
</ul>
<pre><code>/* This is the first sample program in Core Java Chapter 3 */
</code></pre><ul>
<li>第3种注释可以用来自动地生成文档。</li>
</ul>
<pre><code class="bash">/**
 * This is the first sample program <span class="keyword">in</span> Core Java Chapter 3
 * @version 1.01 1997-03-22
 * @author Gary Cornell
 */
</code></pre>
<p> 注：Java中，/**/注释不能嵌套</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p> Java是强类型语言，每个变量声明一种类型。<br> Java中一共有8种基本类型。</p>
<h3 id="整型（4种）"><a href="#整型（4种）" class="headerlink" title="整型（4种）"></a>整型（4种）</h3><table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">存储需求</th>
<th style="text-align:center">取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">4字节</td>
<td style="text-align:center">-2 147 483 648~2 147 483 647</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">2字节</td>
<td style="text-align:center">-32768~32767</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">8字节</td>
<td style="text-align:center">-9 223 372 036 854 775 808~9 223 372 036 854 775 807</td>
</tr>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">1字节</td>
<td style="text-align:center">-128~127</td>
</tr>
</tbody>
</table>
<h3 id="浮点型（2种）"><a href="#浮点型（2种）" class="headerlink" title="浮点型（2种）"></a>浮点型（2种）</h3><table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">存储需求</th>
<th style="text-align:center">取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">4字节</td>
<td style="text-align:center">大约±3.402 823 47E+38F（有效位6~7位）</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">8字节</td>
<td style="text-align:center">大约±1.797 693 134 862 315 70E+308（有效位15位）</td>
</tr>
</tbody>
</table>
<p>注：浮点数值不适用于无法接收舍入误差的金融计算。<br>浮点数值采用二进制系统表示，无法精确地表示分数1/10。</p>
<h3 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h3><p>描述了UTF-16编码中的一个代码单元。建议不要在程序中使用char类型。</p>
<h3 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h3><p>boolean类型有两个值：false和true，用来判定逻辑条件。整型和布尔值之间不能进行互相转换。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>在Java中，每个变量都有一个类型。</li>
<li>声明一个变量后，必须用赋值语句对变量进行显式初始化。</li>
<li><p>变量的声明尽可能靠近变量第一次使用的地方</p>
</li>
<li><p>Java中用final指示常量，表示只能被赋值一次，不能更改。</p>
</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java中使用+ - * /表示加减乘除。<br>当参与/运算的两个操作数都是整数时，表整除，否则表浮点除法。整数的求余用%表示。</p>
<h3 id="数值类型转换"><a href="#数值类型转换" class="headerlink" title="数值类型转换"></a>数值类型转换</h3><p><img src="/img/数值类型转换.png" alt="图片名称" title=""></p>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。</p>
<pre><code>double x= 9.997;
int nx= (int)Math.round(x);
</code></pre><h3 id="括号和运算符级别"><a href="#括号和运算符级别" class="headerlink" title="括号和运算符级别"></a>括号和运算符级别</h3><p><img src="/img/运算符.jpg" alt="图片名称" title=""></p>
<h3 id="枚举类型（详见后）"><a href="#枚举类型（详见后）" class="headerlink" title="枚举类型（详见后）"></a>枚举类型（详见后）</h3><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h3><p>substring可以从一个较大的字符串提取出一个子串。如：</p>
<pre><code>String greeting= &quot;Hello&quot;;
String s= greeting.substring(0,3); //Hel
</code></pre><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p>Java允许使用+号拼接两个字符串。</p>
<pre><code>String expletive= &quot;Expletive&quot;;
String PG13=&quot;deleted&quot;;
String message= expletive + PG13; //Expletivedeleted
</code></pre><h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h3><p>String类没有提供用于修改字符串的方法。<br>而是创建一个新字符串，而不是修改一个代码单元。</p>
<h3 id="检测字符串是否相等"><a href="#检测字符串是否相等" class="headerlink" title="检测字符串是否相等"></a>检测字符串是否相等</h3><p>可以使用equals方法检测两个字符串是否相等。如：</p>
<pre><code>s.equals(t);
</code></pre><p>注：不要用==检测两个字符串是否相等，它只能确定两个字符串是否放在同一个位置上。</p>
<h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><h3 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h3><p>块（即复合语句）是指在一对大括号括起来的若干条简单的Java语句。块决定了变量的作用域，一个块可以嵌套在另一个块中。但是不能在嵌套的两个块中声明同名的变量。</p>
<pre><code>public static void main(String[] args)
{
    int n;
    ...
    {
        int k;
        int n; //Error--can&apos;t redefine n in inner block
        ...
    }
}
</code></pre><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><pre><code>if (condition){
    statement
}else if (condition){
    statement
}else{
    statement
}
</code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><pre><code>while(condition)
{
    statement
}


do
{
    statement
}
while(condition);
</code></pre><h3 id="确定循环"><a href="#确定循环" class="headerlink" title="确定循环"></a>确定循环</h3><pre><code>for(condition)
{
    statement
}
</code></pre><h3 id="多重选择"><a href="#多重选择" class="headerlink" title="多重选择"></a>多重选择</h3><pre><code>switch(choice)
{
    case 1:
        ...
        break;
    case 2:
        ...
        break;
    case 3:
        ...
        break;
    case 4:
        ...
        break;
    default:
        //bad input
        ...
        break;
}
</code></pre><p>注：switch语句将从与选项值相匹配的case标签处开始执行直到遇到break语句，或者执行到switch语句的结束处为止。如果没有相匹配的case标签，而有default字句，就执行这个子句。</p>
<p>case标签可以使常量表达式，枚举常量，还可以是字符串字面量。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="两种声明形式"><a href="#两种声明形式" class="headerlink" title="两种声明形式"></a>两种声明形式</h3><pre><code>int[] a;

或

int a[];
</code></pre><h3 id="for-each-循环"><a href="#for-each-循环" class="headerlink" title="for each 循环"></a>for each 循环</h3><p>可以用来依次处理数组中的每个元素（其他类型的元素集合亦可）。</p>
<pre><code>for (variable : collection ) statement

如:
for(int element : a)
    System.out.println(element);
</code></pre><h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><p>在Java中。允许将一个数组变量拷贝给另一个数组变量。这时，两个变量将引用同一个数组。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java的基本程序设计结构&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux 学习笔记</title>
    <link href="http://yoursite.com/2017/03/15/Linux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/03/15/Linux-学习笔记/</id>
    <published>2017-03-15T05:59:32.000Z</published>
    <updated>2017-03-15T08:39:41.283Z</updated>
    
    <content type="html"><![CDATA[<p>Linux概述<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先安装虚拟机，可以自行搜索VM。<br>下载CentOS的linux系统，我的版本是CentOS-6.7-i386-bin-DVD1。</p>
<p>接下来，依次打开虚拟机–文件–下一步，选择安装盘镜像文件，目录为之前下载的linux系统，确保安装路径有20G的空间，接着点击下一步直至完成（可选择自定义硬件），随后开启此虚拟机，开始安装linux。</p>
<p>安装过程首先选择语言，然后在SOFTWARE SELECTION中选择GNOME DESKTOP，注意，GNOME为图形界面选项，如果采用默认值，安装完成后进入的就是命令行界面。<br>另外还要在INSTALLATION DESTINATION选项中确认一下，然后begin installtation，等待安装期间，创建用户以及设置root密码，完成后等待安装。</p>
<p>完成后点击reboot启动系统，第一次开机会有initial setup of CentOS Linux选项，依次<br>输入“1”，按Enter键<br>输入“2”，按Enter键<br>输入“q”，按Enter键<br>输入“yes”，按Enter键</p>
<p>至此，linux安装完成。</p>
<h2 id="常用Shell命令操作"><a href="#常用Shell命令操作" class="headerlink" title="常用Shell命令操作"></a>常用Shell命令操作</h2><h3 id="“-”-管道"><a href="#“-”-管道" class="headerlink" title="“|” 管道"></a>“|” 管道</h3><p>格式如：命令1|命令2<br>把左边命令1的输出作为右边命令2的输入。</p>
<h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>以其他用户（默认是root）的身份去执行另一个命令。</p>
<h3 id="touch-创建文件，rm-删除文件，"><a href="#touch-创建文件，rm-删除文件，" class="headerlink" title="touch 创建文件，rm 删除文件，"></a>touch 创建文件，rm 删除文件，</h3><pre><code>[cysun_14@promote ~]$ touch blank.txt
[cysun_14@promote ~]$ rm blank.txt
</code></pre><p>【注】：rm有两个常用选项，-f 选项为强制删除，忽略不存在的文件。 -r 选项为递归删除目录及其内容。</p>
<h3 id="mkdir-创建目录，rmdir-删除目录"><a href="#mkdir-创建目录，rmdir-删除目录" class="headerlink" title="mkdir 创建目录，rmdir 删除目录"></a>mkdir 创建目录，rmdir 删除目录</h3><pre><code>[cysun_14@promote ~]$ mkdir firstdir
[cysun_14@promote ~]$ redir firstdir
</code></pre><p>【注】：mkdir 可以使用选项 -p 指示如果要创建的目录的父目录不存在，一并创建。rmdir只能删除空目录。</p>
<h3 id="who-whoami"><a href="#who-whoami" class="headerlink" title="who whoami"></a>who whoami</h3><p>who 可以查看所有正在使用系统的用户的用户名，所用终端，登录时间等，<br>whoami可以查看当前用户信息。</p>
<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>显示文件指定目录。</p>
<h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><p>根据文件名搜索二进制文件、手册页文件或源代码文件。未指定会将三类文件都显示出来。</p>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>cat有两项功能，一是显示文件内容，二是连接合并文件内容。</p>
<h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><p>Visual Interface，UNIX系统中最常用的编辑器。</p>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>将源文件复制到目标文件，或将多个源文件复制到目标目录。</p>
<pre><code>[cysun_14@promote ~]$ cp [选项] ... 源文件 目标文件
</code></pre><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>将源文件重命名为目标文件，或将源文件移动至指定目录。</p>
<pre><code>[cysun_14@promote ~]$ mv [选项] ... 源文件 目标文件
</code></pre><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p>更改文件属主</p>
<pre><code>[cysun_14@promote ~]$ chown [选项]... [所有者][:[组]] 文件...
</code></pre><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><p>更改文件属组</p>
<pre><code>[cysun_14@promote ~]$ chgrp [选项]... 用户组 文件...
</code></pre><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>更改文件权限</p>
<pre><code>[cysun_14@promote ~]$ chmod [选项]... 模式[,模式] 文件...
</code></pre><h2 id="Shell编程基础知识"><a href="#Shell编程基础知识" class="headerlink" title="Shell编程基础知识"></a>Shell编程基础知识</h2><p>运行Linux Shell程序的方法有三种：</p>
<ul>
<li>赋予程序文件可执行权限，直接运行。</li>
<li>调用命令解释器（Shell）解释运行。</li>
<li>使用source命令执行。</li>
</ul>
<p>可执行命令分三种：</p>
<ul>
<li>内部命令。</li>
<li>Shell函数。</li>
<li>外部命令。</li>
</ul>
<p>变量赋值方式： 变量名=变量值,<br>“=”两边不能有空格，引用变量时，在变量名前加“$”符号。</p>
<pre><code>[cysun_14@promote ~]$ str=&quot;Hello, world&quot;
[cysun_14@promote ~]$ echo $str
</code></pre><p>控制结构类似C,JAVA,略。</p>
<p>Shell函数</p>
<pre><code>[funciton] 函数名()
{
    命令表
    return[n]
}
</code></pre><p>n值是退出函数时的退出状态，未指定n默认取最后一个命令的退出状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux概述&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Core Java I 学习笔记(一)</title>
    <link href="http://yoursite.com/2017/03/06/Core-Java-I-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://yoursite.com/2017/03/06/Core-Java-I-学习笔记-一/</id>
    <published>2017-03-06T10:50:40.000Z</published>
    <updated>2017-03-06T11:22:39.034Z</updated>
    
    <content type="html"><![CDATA[<p>Java程序概述<br><a id="more"></a></p>
<h2 id="关键术语"><a href="#关键术语" class="headerlink" title="关键术语"></a>关键术语</h2><h3 id="简单性"><a href="#简单性" class="headerlink" title="简单性"></a>简单性</h3><p>Java剔除了C++中许多很少使用，难以处理，易混淆的特性，是C++语法的一个“纯洁”版本，<br>如没有头文件、指针运算、结构、联合、操作符重载等。</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>Java的面向对象特性与C++旗鼓相当，主要不同在于多重继承，在java中，取而代之的是接口。</p>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>Java应用程序能够通过URL打开和访问网络上的对象。</p>
<h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>Java编译器能够检测许多在其他语言中仅在运行时才能够检测出来的问题。</p>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>从一开始，Java就设计成能够防范各种攻击，包括</p>
<ul>
<li>运行时堆栈溢出。</li>
<li>破坏自己的进程空间之外的内存。</li>
<li>未经授权读写文件。</li>
</ul>
<h3 id="体系结构中立"><a href="#体系结构中立" class="headerlink" title="体系结构中立"></a>体系结构中立</h3><p>编译器生产一个体系结构中立的目标文件格式，这是一种编译过的代码，<br>只要有Java运行时系统，这些编译后的代码可以在许多处理器上运行。</p>
<h3 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h3><p>与C、C++不同，Java规范中没有“以来具体实现”的地方。基本数据类型的大小以及有关运算都做了明确的说明。<br>作为系统组成部分的类库，定义了可移植的接口。</p>
<h3 id="解释型"><a href="#解释型" class="headerlink" title="解释型"></a>解释型</h3><p>Java解释器可以在任何移植了解释器的机器上执行Java字节码。</p>
<h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>字节码可以动态地翻译成对应运行这个应用的特定CPU的机器码。</p>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>多线程可以带来更好的交互响应和实时行为。</p>
<h3 id="动态性"><a href="#动态性" class="headerlink" title="动态性"></a>动态性</h3><p>从各种角度看，Java比C或C++相比更加具有动态性。它能够适应不断发展的环境。<br>库中可以自由地添加新方法和实例变量，而对客户端没有任何影响。在Java中找出运行时类型信息十分简单。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java程序概述&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习笔记（四）</title>
    <link href="http://yoursite.com/2017/02/08/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2017/02/08/Mybatis学习笔记（四）/</id>
    <published>2017-02-08T07:02:39.000Z</published>
    <updated>2017-02-08T10:39:09.466Z</updated>
    
    <content type="html"><![CDATA[<p>SqlMapConfig配置文件 &amp;&amp; 输入&amp;输出映射<br><a id="more"></a></p>
<h2 id="SqlMapConfig"><a href="#SqlMapConfig" class="headerlink" title="SqlMapConfig"></a>SqlMapConfig</h2><p>SqlMapConfig.xml中配置的内容和顺序如下</p>
<ul>
<li>properties（属性）</li>
<li>settings（全局配置参数）</li>
<li><strong> typeAliases（类型别名) </strong></li>
<li>typeHandlers（类型处理器）</li>
<li><em>objectFactory（对象工厂）</em></li>
<li><em>plugins（插件）</em></li>
<li>environments（环境集合属性对象）<ul>
<li>environment（环境子属性对象）<ul>
<li>transactionManager（事务管理）</li>
<li>dataSource（数据源）</li>
</ul>
</li>
</ul>
</li>
<li><strong> mappers（映射器）</strong><br>(注：粗体是重点，斜体不常用)</li>
</ul>
<h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>将数据库连接参数单独配置在db.properties中，只需要在SqlMapConfig.xml中加载db.properties的属性值。在SqlMapConfig.xml中就不需要对数据库连接参数硬编码。<br>将数据库连接参数只配置在db.properties中。原因：方便对参数进行统一管理，其它xml可以引用该db.properties。</p>
<pre><code>jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/mybatis001?characterEncoding=utf-8
jdbc.username=root
jdbc.password=
</code></pre><p>注意： MyBatis 将按照下面的顺序(优先级)来加载属性：</p>
<ul>
<li>在properties元素体内定义的属性首先被读取。</li>
<li>然后会读取properties元素中resource或url加载的属性，它会覆盖已读取的同名属性。</li>
<li>最后读取parameterType传递的属性，它会覆盖已读取的同名属性。</li>
</ul>
<h3 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h3><p>mybatis框架在运行时可以调整一些运行参数,比如：开启二级缓存、开启延迟加载…<br>全局参数将会影响mybatis的运行行为。具体参考:<a href="http://www.mybatis.org/mybatis-3/configuration.html#settings" target="_blank" rel="external">mybatis-settings</a></p>
<h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>在mapper.xml中，定义很多的statement，statement需要parameterType指定输入参数的类型、需要resultType指定输出结果的映射类型。<br>如果在指定类型时输入类型全路径，不方便进行开发，可以针对parameterType或resultType指定的类型定义一些别名，在mapper.xml中通过别名定义，方便开发。</p>
<ul>
<li>mybatis默认支持别名参考：<a href="http://www.mybatis.org/mybatis-3/configuration.html#typeAliases" target="_blank" rel="external">typeAliases</a></li>
<li>自定义别名：</li>
</ul>
<pre><code>&lt;!-- 别名定义 --&gt;
&lt;typeAliases&gt;

    &lt;!-- 针对单个别名定义
    type：类型的路径
    alias：别名
     --&gt;
    &lt;!--  &lt;typeAlias alias=&quot;User&quot;  type=&quot;com.mybatis.po.User&quot;/&gt;  --&gt;
    &lt;!-- 批量别名定义
    指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以）
    --&gt;
    &lt;package name=&quot;com.mybatis.po&quot;/&gt;

&lt;/typeAliases&gt;
</code></pre><h3 id="typeHandlers"><a href="#typeHandlers" class="headerlink" title="typeHandlers"></a>typeHandlers</h3><p>mybatis中通过typeHandlers完成jdbc类型和java类型的转换。<br>通常情况下，mybatis提供的类型处理器满足日常的需求，不需要自定义。具体参考：<a href="http://www.mybatis.org/mybatis-3/configuration.html#typeHandlers" target="_blank" rel="external">typeHandlers</a></p>
<h3 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h3><ul>
<li>通过resource加载单个配置文件<pre><code>&lt;!--通过resource方法一次加载一个映射文件 --&gt;
&lt;mapper resource=&quot;com/mybatis/po/User.xml&quot;/&gt;
</code></pre></li>
<li>通过mapper接口加载单个mapper<pre><code>&lt;!-- 通过mapper接口加载单个 映射文件
    遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录中
    上边规范的前提是：使用的是mapper代理方法--&gt;
&lt;mapper class=&quot;com.mybatis.mapper.UserMapper&quot;/&gt;
</code></pre></li>
<li>package批量加载Mapper文件<pre><code>&lt;!-- 批量加载mapper
        指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载
        遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 中
        上边规范的前提是：使用的是mapper代理方法
         --&gt;
&lt;package name=&quot;com.mybatis.mapper&quot;/&gt;
</code></pre></li>
</ul>
<h2 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h2><p>通过parameterType指定输入参数类型，参数类型可以是基本类型，pojo，map类型</p>
<h3 id="传递pojo的包装对象"><a href="#传递pojo的包装对象" class="headerlink" title="传递pojo的包装对象"></a>传递pojo的包装对象</h3><ul>
<li><p>定义包装类型pojo</p>
<pre><code>public class UserQueryVo {
    //在这里包装所需要的查询条件

    //用户查询条件
    private UserCustom userCustom;

    public UserCustom getUserCustom() {
        return userCustom;
    }

    public void setUserCustom(UserCustom userCustom) {
        this.userCustom = userCustom;
    }

    //可以包装其它的查询条件，订单、商品
    //....
}
</code></pre><p>其中，UserCustom类继承User</p>
<pre><code>public class UserCustom extends User{
}
</code></pre></li>
<li><p>mapper.xml</p>
<pre><code>&lt;select id=&quot;FindUserList&quot; parameterType=&quot;QueryVo&quot; resultType=&quot;user&quot;&gt;
    &lt;!-- 取属性名称使用“.”的方式来取 --&gt;
    select * from user where id=#{user.userId}
&lt;/select&gt;
</code></pre></li>
</ul>
<ul>
<li><p>mapper.java</p>
<pre><code>//用户信合查询息综
public List&lt;User&gt; findUserList(UserQueryVo vo) throws Exception;
</code></pre></li>
<li><p>测试代码</p>
<pre><code>public void testFindUserList() throws Exception {

    SqlSession sqlSession = sqlSessionFactory.openSession();

    //创建UserMapper对象，mybatis自动生成mapper代理对象
    UserMapper userMapper  sqlSession.getMapper(UserMapper.class);

    //创建包装对象，设置查询条件
    UserQueryVo userQueryVo = new UserQueryVo();
    UserCustom userCustom = new UserCustom();
    //由于这里使用动态sql，如果不设置某个值，条件不会拼接在sql中
    userCustom.setAge(&quot;1&quot;);
    userCustom.setuserName(&quot;张三&quot;);
    userQueryVo.setUserCustom(userCustom);
    //调用userMapper的方法

    List&lt;UserCustom&gt; list = userMapper.findUserList(userQueryVo);

    System.out.println(list);
}
</code></pre></li>
</ul>
<h2 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h2><p>输出映射有两种方式：resultType，resultMap</p>
<h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>使用resultType进行输出映射，只有查询出来的列名和pojo中的属性名一致，该列才可以映射成功。<br>如果查询出来的列名和pojo中的属性名全部不一致，没有创建pojo对象。<br>只要查询出来的列名和pojo中的属性有一个一致，就会创建pojo对象。</p>
<ul>
<li><p>mapper.xml</p>
<pre><code>&lt;select id=&quot;findUserCount&quot; parameterType=&quot;com.iot.mybatis.po.UserQueryVo&quot; resultType=&quot;int&quot;&gt;
    SELECT count(*) FROM user WHERE user.sex=#{userCustom.sex} AND user.username LIKE &apos;%${userCustom.username}%&apos;
&lt;/select&gt;
</code></pre></li>
<li><p>mapper.java</p>
<pre><code>public void testFindUserCount() throws Exception {

    SqlSession sqlSession = sqlSessionFactory.openSession();

    //创建UserMapper对象，mybatis自动生成mapper代理对象
    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);

    //创建包装对象，设置查询条件
    UserQueryVo userQueryVo = new UserQueryVo();
    UserCustom userCustom = new UserCustom();
    //由于这里使用动态sql，如果不设置某个值，条件不会拼接在sql中
    userCustom.setuserName(&quot;小&quot;);
    userQueryVo.setUserCustom(userCustom);
    //调用userMapper的方法

    int count = userMapper.findUserCount(userQueryVo);

    System.out.println(count);
}
</code></pre><p>查询出来的结果集只有一行且一列，可以使用简单类型进行输出映射。</p>
</li>
</ul>
<h3 id="输出pojo"><a href="#输出pojo" class="headerlink" title="输出pojo"></a>输出pojo</h3><p>不管是输出的pojo单个对象还是一个列表（list中包括pojo），在mapper.xml中resultType指定的类型是一样的。</p>
<ul>
<li><p>输出pojo对象</p>
<pre><code>public User findUserById(int id) throws Exception;
</code></pre></li>
<li><p>输出pojo对象list</p>
<pre><code>public List&lt;User&gt; findUserByName(String name) throws Exception;
</code></pre><p>生成的动态代理对象中是根据mapper方法的返回值类型确定是调用selectOne(返回单个对象调用)还是selectList （返回集合对象调用 ）。</p>
</li>
</ul>
<h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>mybatis中使用resultMap完成高级输出结果映射。</p>
<ul>
<li><p>定义reusltMap</p>
<pre><code>&lt;!-- 定义resultMap
将SELECT id id_,username username_ FROM USER 和User类中的属性作一个映射关系

type：resultMap最终映射的java对象类型,可以使用别名
id：对resultMap的唯一标识
 --&gt;
 &lt;resultMap type=&quot;user&quot;  id=&quot;userResultMap&quot;&gt;
    &lt;!-- 
        id:为主键列
        column:结果集中的主键列的列名
        property：对应user对象中保存主键属性。
        最终resultMap对column和property作一个映射关系 （对应关系）
     --&gt;
    &lt;id column=&quot;id&quot; property=&quot;userID&quot;/&gt;
    &lt;!-- 普通列
        result：对普通名映射定义
         column：查询出来的列名
         property：type指定的pojo类型中的属性名
         最终resultMap对column和property作一个映射关系 （对应关系）
      --&gt;
    &lt;result column=&quot;uname&quot; property=&quot;userName&quot;/&gt;
    &lt;result column=&quot;age&quot; property=&quot;userAge&quot;/&gt;
&lt;/resultMap&gt;
</code></pre></li>
<li><p>使用resultMap作为statement的输出映射类型</p>
<pre><code>&lt;!-- 使用resultMap进行输出映射
    resultMap：指定定义的resultMap的id，如果这个resultMap在其它的mapper文件，前边需要加namespace
    --&gt;
&lt;select id=&quot;getUserResultMap&quot; resultMap=&quot;userResultMap&quot;&gt;
    select userID, userName uname, userAge age from mybatis.user
&lt;/select&gt;
</code></pre></li>
<li><p>mapper.java</p>
<pre><code>public List&lt;User&gt; getUserResultMap() throws Exception;
</code></pre></li>
<li><p>测试代码</p>
<pre><code>public void testFindUserByIdResultMap() throws Exception {

    SqlSession sqlSession = sqlSessionFactory.openSession();

    //创建UserMapper对象，mybatis自动生成mapper代理对象
    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);

    //调用userMapper的方法

    List&lt;User&gt; list = userMapper.getUserResultMap();

    System.out.println(list);
</code></pre></li>
</ul>
<pre><code>}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SqlMapConfig配置文件 &amp;amp;&amp;amp; 输入&amp;amp;输出映射&lt;br&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习笔记（三）</title>
    <link href="http://yoursite.com/2017/02/06/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2017/02/06/Mybatis学习笔记（三）/</id>
    <published>2017-02-06T07:49:23.000Z</published>
    <updated>2017-02-08T10:23:45.818Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis的Dao开发<br><a id="more"></a><br>使用dao开发有两种开发方式，一种是使用普通的接口和接口实现类来进行开发<br>另一种开发方式是使用mapper代理的开发的方式(直接使用接口)</p>
<h2 id="sqlSession的使用范围"><a href="#sqlSession的使用范围" class="headerlink" title="sqlSession的使用范围"></a>sqlSession的使用范围</h2><h3 id="sessionFactoryBuidler"><a href="#sessionFactoryBuidler" class="headerlink" title="sessionFactoryBuidler"></a>sessionFactoryBuidler</h3><p>通过SqlSessionFactoryBuilder创建会话工厂SqlSessionFactory将SqlSessionFactoryBuilder当成一个工具类使用即可，不需要使用单例管理SqlSessionFactoryBuilder。在需要创建SqlSessionFactory时候，只需要new一次SqlSessionFactoryBuilder即可。</p>
<h3 id="sqlSessionFactory"><a href="#sqlSessionFactory" class="headerlink" title="sqlSessionFactory"></a>sqlSessionFactory</h3><p>sqlSessionFactory生产sqlSession回话，使用单列模式进行创建sqlSessionFactory(工厂一旦创建，只创建一个实例)，将mybatis和spring进行整合后使用单列模式进行管理。</p>
<h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><p>sqlSession是面向用户的一个回话接口<br>sqlSession提供很多操作数据库的方法：selectOne(查询单个对象)，selectList(返回单个或者多个对象)<br>sqlSession是线程不安全的，在sqlSession实现类中除了有查询数据库中的方法外还有数据域属性。<br>sqlSession最好是在方法内部使用。</p>
<h2 id="传统的dao的开发方式"><a href="#传统的dao的开发方式" class="headerlink" title="传统的dao的开发方式"></a>传统的dao的开发方式</h2><p>程序员需要编写dao接口和dao接口实现类<br>在dao实现类里面进行注入sqlSessionFactory,然后通过sqlSessionFactory创建sqlSession</p>
<h3 id="Dao接口"><a href="#Dao接口" class="headerlink" title="Dao接口"></a>Dao接口</h3><pre><code>public interface UserDao {
    public User selectUserByID(int id) throws Exception;

    public void insertUser(User user) throws Exception;

    public List&lt;User&gt; getUserByName(String name) throws Exception;

    public void deleteUser(int id) throws Exception;
}
</code></pre><h3 id="Dao的实现类"><a href="#Dao的实现类" class="headerlink" title="Dao的实现类"></a>Dao的实现类</h3><pre><code>public class UserDaoImpl implements UserDao {

    //给dao层注入SessionFactory对象
    //使用构造方法进行注入
    public SqlSessionFactory sessionFactory;    
    public UserDaoImpl(SqlSessionFactory sessionFactory){
        this.sessionFactory=sessionFactory;
    }

    @Override
    public User selectUserByID(int id) throws Exception {
        // TODO Auto-generated method stub
        //获取sqlSession
            SqlSession sqlSession = sessionFactory.openSession();
            //根据ID进行查询
            User user = sqlSession.selectOne(&quot;test.selectUserByID&quot;, 3);
            return user;
    }

    @Override
    public void insertUser(User user) throws Exception{
        // TODO Auto-generated method stub
        SqlSession sqlSession = sessionFactory.openSession();
        //执行插入操作
        sqlSession.insert(&quot;test.insertUser&quot;, user);
    }

    @Override
    public List&lt;User&gt; getUserByName(String name) throws Exception{
        // TODO Auto-generated method stub
        SqlSession sqlSession = sessionFactory.openSession();
        List&lt;User&gt; list = sqlSession.selectList(&quot;test.getUserByName&quot;, name);
        return list;
    }

    @Override
    public void deleteUser(int id) throws Exception {
        // TODO Auto-generated method stub
        SqlSession sqlSession = sessionFactory.openSession();
        //执行删除操作
        sqlSession.delete(&quot;test.deleteUser&quot;, id);
    }

}
</code></pre><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre><code>public class UserDaoImplTest {

    private SqlSessionFactory sqlSessionFactory;

    // 此方法是在执行testFindUserById之前执行
    @Before
    public void setUp() throws Exception {
        // 创建sqlSessionFactory

        // mybatis配置文件
        String resource = &quot;SqlMapConfig.xml&quot;;
        // 得到配置文件流
        InputStream inputStream = Resources.getResourceAsStream(resource);

        // 创建会话工厂，传入mybatis的配置文件信息
        sqlSessionFactory = new SqlSessionFactoryBuilder()
                .build(inputStream);
    }

    @Test
    public void testFindUserById() throws Exception {
        // 创建UserDao的对象
        UserDao userDao = new UserDaoImpl(sqlSessionFactory);

        // 调用UserDao的方法
        User user = userDao.selectUserByID(1);

        System.out.println(user);
    }

}
</code></pre><h3 id="原始dao总结"><a href="#原始dao总结" class="headerlink" title="原始dao总结"></a>原始dao总结</h3><ul>
<li>dao接口中存在着大量的模版方法，能不能提取出来，大量减轻程序员的压力</li>
<li>实现类进行操作数据库时对statement的ID进行硬编码了。</li>
<li>sqlSession直接进行设置参数，由于sqlsession使用的泛型，设置参数类型不会报错，这样不利于开发。</li>
</ul>
<h2 id="代理Mapper开发模式"><a href="#代理Mapper开发模式" class="headerlink" title="代理Mapper开发模式"></a>代理Mapper开发模式</h2><p>程序员还需要开发mapper.xml文件。<br>程序员编写mapper接口需要遵循一些开发规范。Mybatis会自动生成mapper接口实现类代理类。</p>
<h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><ul>
<li><p>namespace的地址和mapper.xml的地址相同</p>
  <!--
   namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离
   注意：使用mapper代理方法开发，namespace有特殊重要的作用,namespace等于mapper接口地址
   -->
  <mapper namespace="com.mybatis.mapper.UserMapper">
</mapper></li>
<li><p>Dao接口中的方法必须和statement的Id必须一致</p>
</li>
<li>Mapper接口中的方法输入参数必须和对应的Mapper.xml中的parameterType中的参数匹配</li>
<li>Mapper接口返回值类型必须和对应的mapper.xml中resultType输出类型匹配。</li>
</ul>
<pre><code>User getUserByName(String name);
</code></pre><hr>
<pre><code>&lt;select id=&quot;getUserByName&quot; parameterType=&quot;string&quot; resultType=&quot;User&quot;&gt;
  SELECT * FROM  user  WHERE userName LIKE #{name}
&lt;/select&gt;
</code></pre><h3 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;

&lt;mapper namespace=&quot;com.mybatis.mapper.UserMapper&quot;&gt;

    &lt;select id=&quot;selectUserByID&quot;    parameterType=&quot;int&quot;      resultType=&quot;User&quot;&gt;
        select * from user where userID = #{userId}
    &lt;/select&gt;

    &lt;insert id=&quot;addUser&quot;  parameterType=&quot;User&quot; &gt;
        INSERT INTO `user`(userName,userAge,userAddress) 
        VALUES(#{userName},#{userAge},#{userAddress})
    &lt;/insert&gt;

    &lt;!-- resultType是返回结果中一条记录的类型 --&gt;
    &lt;select id=&quot;getUserByName&quot; parameterType=&quot;string&quot; resultType=&quot;User&quot;&gt;
        SELECT * from user where userName LIKE #{name}
    &lt;/select&gt;

    &lt;update id=&quot;updateUser&quot; parameterType=&quot;User&quot;&gt;
        UPDATE USER
        SET userName = #{username},
         userAge = #{age},
         userAddress = #{address},
        WHERE
        userID = #{id}
    &lt;/update&gt;

    &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;
           delete from user where id=#{userId}
    &lt;/delete&gt;

&lt;/mapper&gt;
</code></pre><h3 id="UserMapper-java"><a href="#UserMapper-java" class="headerlink" title="UserMapper.java"></a>UserMapper.java</h3><pre><code>public interface UserMapper {
    User selectUserByID(int id);

    void insertUser(User user);

    User getUserByName(String name);

    void updateUser (User user);

    void deleteUser(int id);
}
</code></pre><h3 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a>Test.java</h3><pre><code>public class UserDaoImplTest {

    private SqlSessionFactory sqlSessionFactory;

    // 此方法是在执行testFindUserById之前执行
    @Before
    public void setUp() throws Exception {
        // 创建sqlSessionFactory

        // mybatis配置文件
        String resource = &quot;SqlMapConfig.xml&quot;;
        // 得到配置文件流
        InputStream inputStream = Resources.getResourceAsStream(resource);

        // 创建会话工厂，传入mybatis的配置文件信息
        sqlSessionFactory = new SqlSessionFactoryBuilder()
                .build(inputStream);
    }

    @Test
    public void testFindUserById() throws Exception {
        SqlSession sqlSession=sqlSessionFactory.openSession();  

        //创建UserMapper代理对象  
        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);  

        //调用userMapper的方法  
        User user=userMapper.selectUserById(1);  

        System.out.println(user.getUsername());
    }

}
</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Mapper动态代理方式底层根据返回值类型进行判断调用那个方法：<br>如果是返回单个对象就调用selectOne<br>如果是返回集合就调用selectList</p>
<p>Mapper接口中的参数只能是一个是否影响系统开发系统维护：<br>注意：dao层代码是被业务层公用的，即使是dao层代码参数只能是一个<br>业务层包装成不同类型pojo都可以满足不同业务需求。<br>持久层方法参数可以是map，基本类型，自定义对象，包装类型.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybatis的Dao开发&lt;br&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习笔记（二）</title>
    <link href="http://yoursite.com/2017/02/05/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/02/05/Mybatis学习笔记（二）/</id>
    <published>2017-02-05T06:36:12.000Z</published>
    <updated>2017-02-05T07:58:57.857Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis入门程序<br><a id="more"></a></p>
<h2 id="工程搭建"><a href="#工程搭建" class="headerlink" title="工程搭建"></a>工程搭建</h2><p>第一步：创建一个java工程。（数据库自行创建）<br>第二步：导入jar包。包括mybatis的jar包、mybatis依赖的jar包、mysql的数据库驱动。<br>第三步：创建一个log4j.properties。方便查看sql语句用的。<br>第四步：创建一个SqlMapConfig.xml。配置数据库连接池。<br>第五步：创建Mapper映射文件。<br>第六步：编码。</p>
<h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><pre><code># Global logging configuration
log4j.rootLogger=DEBUG, stdout
# Console output...
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n
</code></pre><h3 id="SqlMapConfig-xml"><a href="#SqlMapConfig-xml" class="headerlink" title="SqlMapConfig.xml"></a>SqlMapConfig.xml</h3><pre><code>&lt;configuration&gt;
    &lt;!-- 和spring整合后 environments配置将废除 --&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
        &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
            &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot; /&gt;
            &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
            &lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;  

    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/mybatis/po/User.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre><h3 id="Mapper映射文件"><a href="#Mapper映射文件" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h3><p>习惯上mapper映射文件的名称和数据库的表名一致。user.xml</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;!-- namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离
 注意：使用mapper代理方法开发，namespace有特殊重要的作用
 --&gt;
&lt;mapper namespace=&quot;test&quot;&gt;
    &lt;!-- 在映射文件中配置很多sql语句 --&gt;
    &lt;!--需求:通过id查询用户表的记录 --&gt;
    &lt;!-- 通过select执行数据库查询
     id:标识映射文件中的sql，称为statement的id
     将sql语句封装到mappedStatement对象中，所以将id称为statement的id
     parameterType:指定输入参数的类型
     #{}标示一个占位符,
     #{value}其中value表示接收输入参数的名称，如果输入参数是简单类型，那么#{}中的值可以任意。

     resultType：指定sql输出结果的映射的java对象类型，select指定resultType表示将单条记录映射成java对象
     --&gt;

    &lt;select id=&quot;selectUserByID&quot;    parameterType=&quot;int&quot;      resultType=&quot;User&quot;&gt;
        select * from user where userID = #{userId}
    &lt;/select&gt;

    &lt;!-- 根据用户名称模糊查询用户信息，可能返回多条
    resultType：指定就是单条记录所映射的java对象类型
    ${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。
    使用${}拼接sql，引起 sql注入
    ${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
     --&gt;

    &lt;select id=&quot;getUserByName&quot; parameterType=&quot;string&quot; resultType=&quot;User&quot;&gt;
        select * from user where userName LIKE #{name}
    &lt;/select&gt;

    &lt;!-- 添加用户
    parameterType：指定输入 参数类型是pojo（包括 用户信息）
    #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
    --&gt;

    &lt;insert id=&quot;insertUser&quot;  parameterType=&quot;User&quot; &gt;
        &lt;!--
         将插入数据的主键返回，返回到user对象中

         SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键

         keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性
         order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
         resultType：指定SELECT LAST_INSERT_ID()的结果类型
          --&gt;
        &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;java.lang.Integer&quot;&gt;
          SELECT LAST_INSERT_ID()
        &lt;/selectKey&gt;

        INSERT INTO `user`(userName,userAge,userAddress) 
        VALUES(#{userName},#{userAge},#{userAddress})
    &lt;/insert&gt;

    &lt;!-- 删除用户 根据id删除用户，需要输入 id值--&gt;
    &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;java.lang.Integer&quot;&gt;
        delete from user where id=#{userId}
    &lt;/delete&gt;

    &lt;!-- 根据id更新用户
    分析：
    需要传入用户的id
    需要传入用户的更新信息
    parameterType指定user对象，包括 id和更新信息，注意：id必须存在
    #{id}：从输入 user对象中获取id属性值
     --&gt;

    &lt;update id=&quot;updateUser&quot; parameterType=&quot;User&quot;&gt;
        UPDATE USER
        SET userName = #{username},
         userAge = #{age},
         userAddress = #{address},
        WHERE
        userID = #{id}
    &lt;/update&gt;
&lt;/mapper&gt;
</code></pre><h3 id="po类"><a href="#po类" class="headerlink" title="po类"></a>po类</h3><p>User.java</p>
<pre><code>public class User {
    private int userid;
    private String userName;
    private int userAge;
    private String userAddress;
     /**
     * @return the userid
     */
    public int getUserid() {
        return userid;
    }
    /**
     * @param userid the userid to set
     */
    public void setUserid(int userid) {
        this.userid = userid;
    }
    /**
     * @return the userName
     */
    public String getUserName() {
        return userName;
    }

    /**
     * @param userName the userName to set
     */
    public void setUserName(String userName) {
        this.userName = userName;
    }
    /**
     * @return the userAge
     */
    public int getUserAge() {
        return userAge;
    }
    /**
     * @param userAge the userAge to set
     */
    public void setUserAge(int userAge) {
        this.userAge = userAge;
    }
    /**
     * @return the userAddress
     */
    public String getUserAddress() {
        return userAddress;
    }
    /**
     * @param userAddress the userAddress to set
     */
    public void setUserAddress(String userAddress) {
        this.userAddress = userAddress;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return &quot;User [userid=&quot; + userid + &quot;, userName=&quot; + userName + &quot;, userAge=&quot; + userAge + &quot;, userAddress=&quot;
                + userAddress + &quot;]&quot;;
    }
}
</code></pre><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre><code>public class Test1 {
    static {
        try {
            //把配置文件读取到流中
            reader = Resources.getResourceAsReader(&quot;SqlMapConfig.xml&quot;);
            // InputStream=Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);
            //创建SqlSessionFactory对象
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static SqlSessionFactory getSession() {
        return sqlSessionFactory;
    }

    public static void main(String[] args) {
        //创建sqlsession对象
        SqlSession sqlSession = sqlSessionFactory.openSession();
        try {
            //查询用户
            //查询一条记录使用selectOne方法
            //第一个参数：statementID
            //第二个参数：sql语句用到的参数
            User user =(User) sqlSession.selectOne(&quot;test.selectUserByID&quot;,2);
            System.out.println(user);    

        /*  //添加用户            
            User user = new User(); user.setUserName(&quot;张三&quot;);
            user.setUserAge(26); 
            user.setUserAddress(&quot;天津&quot;);
            sqlSession.insert(&quot;test.insertUser&quot;, user);

            //
            //删除用户
            sqlSession.delete(&quot;test.deleteUser&quot;, 2);

            //更新信息
            User user = sqlSession.selectOne(&quot;test.getUserByID&quot;, 2);
            System.out.println(user); 
            user.setUserName(&quot;武松&quot;);
            user.setUserAge(20); 
            user.setUserAddress(&quot;清河县&quot;);
            sqlSession.update(&quot;test.updateUser&quot;, user);*/

        } finally {
            //关闭sqlsession
            sqlSession.commit();
            sqlSession.close();
        }
    }
}
</code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><pre><code>User [userid=3, userName=sss, userAge=0, userAddress=null]
</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="parameterType"><a href="#parameterType" class="headerlink" title="parameterType"></a>parameterType</h3><p>指定传递参数类型，前台传入参数和后台获取参数类型必须匹配</p>
<h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>指定返回值类型，执行sql结果映射Java对象</p>
<h3 id="和"><a href="#和" class="headerlink" title="#和$"></a>#和$</h3><p>#{}表示一个占位符，#{}接受传入参数，类型可以是基本类型，pojo，map<br>如果接受的是基本类型的值，那么#{}括号中可以任意或者value<br>如果#{}获取是的pojo，mybatis通过ognl获取参数值。Ognl就是对象导航语言 属性.属性.属性的方式获取值。<br>如果传递是map值，#{}中需要的是map的key</p>
<p>${}表示拼接sql,会引入sql注入，不建议使用<br>${}接受输入参数可以是pojo，基本类型，map<br>${}如果接受的是基本类型，只能是value<br>${}接受pojo类型的参数，通过ognl对象导航进行获取</p>
<h3 id="selectOne和selectList"><a href="#selectOne和selectList" class="headerlink" title="selectOne和selectList"></a>selectOne和selectList</h3><p>selectOne是查询单个对象记录，selectList查询多条记录<br>不能使用selectOne查询selectList的记录</p>
<h3 id="mybatis和hibernate区别"><a href="#mybatis和hibernate区别" class="headerlink" title="mybatis和hibernate区别"></a>mybatis和hibernate区别</h3><p>Hibernate:hibernate是一个标准的ORM框架，不需要写sql语句，维护关系比叫复杂，sql语句自动生成，对sql语句优化，修改比较困难。<br>Hibernate的优缺点：<br>优点：面向对象开发，不需要自己写sql语句。如果进行数据库迁移不需要修改sql语句，只需要修改一下方言。<br>缺点：hibernate维护数据表关系比较复杂。完全是有hibernate来管理数据表的关系，对于我们来说完全是透明的，不易维护。<br>Hibernate自动生成sql语句，生成sql语句比较复杂，比较难挑错。<br>Hibernate由于是面向对象开发，不能开发比较复杂的业务。<br>应用场景：<br>适合需求变化较少的项目，比如ERP，CRM等等<br>Mybatis框架对jdbc框架进行封装，屏蔽了jdbc的缺点，开发简单。<br>Mybatis只需要程序员关注sql本身，不需要过多的关注业务。对sql的优化，修改比较容易<br>适应场景：<br>适合需求变化多端的项目，比如：互联网项目</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybatis入门程序&lt;br&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习笔记（一）</title>
    <link href="http://yoursite.com/2017/02/01/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/02/01/Mybatis学习笔记（一）/</id>
    <published>2017-02-01T12:33:13.000Z</published>
    <updated>2017-02-01T13:55:06.404Z</updated>
    
    <content type="html"><![CDATA[<p>jdbc问题总结 &amp;&amp; Mybatis简介<br><a id="more"></a></p>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="jdbc实现步骤："><a href="#jdbc实现步骤：" class="headerlink" title="jdbc实现步骤："></a>jdbc实现步骤：</h3><ul>
<li>加载数据库驱动</li>
<li>创建并获取数据源连接</li>
<li>创建jdbc的statement对象</li>
<li>设置sql语句</li>
<li>设置statement中的sql参数(statement的参数注入)</li>
<li>statement执行sql语句</li>
<li>对sql执行结果进行解析处理</li>
<li>释放资源(statement,connection,resultSet)</li>
</ul>
<h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ul>
<li>数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。</li>
<li>我们使用JDBC进行操作数据库时，SQL语句基本都散落在各个JAVA类中，这样有三个不足之处：<br>第一，可读性很差，不利于维护以及做性能调优。<br>第二，改动Java代码需要重新编译、打包部署。<br>第三，不利于取出SQL在数据库客户端执行（取出后还得删掉中间的Java代码，编写好的SQL语句写好后还得通过＋号在Java进行拼凑）。 </li>
<li>很多情况下，我们都可以通过在SQL语句中设置占位符来达到使用传入参数的目的，这种方式本身就有一定局限性，它是按照一定顺序传入参数的，要与占位符一一匹配。</li>
<li>从resutSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，不利于系统维护。</li>
<li>存在sql重复问题，不利于维护。</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//数据库连接</span></div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">//预编译的Statement，使用预编译的Statement提高数据库性能</span></div><div class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">//结果集</span></div><div class="line">        ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//加载数据库驱动</span></div><div class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">            <span class="comment">//通过驱动管理类获取数据库链接</span></div><div class="line">            connection =  DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis001?characterEncoding=utf-8"</span>, <span class="string">"root"</span>, <span class="string">"mysql"</span>);</div><div class="line">            <span class="comment">//定义sql语句 ?表示占位符</span></div><div class="line">            String sql = <span class="string">"select * from user where username = ?"</span>;</div><div class="line">            <span class="comment">//获取预处理statement</span></div><div class="line">            preparedStatement = connection.prepareStatement(sql);</div><div class="line">            <span class="comment">//设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值</span></div><div class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);</div><div class="line">            <span class="comment">//向数据库发出sql执行查询，查询出结果集</span></div><div class="line">            resultSet =  preparedStatement.executeQuery();</div><div class="line">            <span class="comment">//遍历查询结果集</span></div><div class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</div><div class="line">                System.out.println(resultSet.getString(<span class="string">"id"</span>)+<span class="string">"  "</span>+resultSet.getString(<span class="string">"username"</span>));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            <span class="comment">//释放资源</span></div><div class="line">            <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    resultSet.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    preparedStatement.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    connection.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h3 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h3><ul>
<li>mybatis是一个持久层的框架，是apache下的顶级项目。</li>
<li>mybatis托管到goolecode下，再后来托管到github下(<a href="https://github.com/mybatis/mybatis-3/releases)。" target="_blank" rel="external">https://github.com/mybatis/mybatis-3/releases)。</a></li>
<li>mybatis让程序将主要精力放在sql上，通过mybatis提供的映射方式，自由灵活生成（半自动化，大部分需要程序员编写sql）满足需要sql语句。</li>
<li>mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。</li>
</ul>
<h3 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h3><p><img src="/img/mybatis_框架图.png" alt="图片名称" title=""></p>
<ul>
<li>mybatis配置<br>SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。<br>mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。</li>
<li>通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂</li>
<li>由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。</li>
<li>mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。</li>
<li>Mapped Statement也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。</li>
<li>Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对preparedStatement设置参数。</li>
<li>Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql后将输出结果映射至java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jdbc问题总结 &amp;amp;&amp;amp; Mybatis简介&lt;br&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>算法导论笔记（五）</title>
    <link href="http://yoursite.com/2017/01/19/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://yoursite.com/2017/01/19/算法导论笔记（五）/</id>
    <published>2017-01-19T14:24:09.000Z</published>
    <updated>2017-01-20T06:49:17.292Z</updated>
    
    <content type="html"><![CDATA[<p>Depth-First-Search<br><a id="more"></a></p>
<h3 id="DFS-G"><a href="#DFS-G" class="headerlink" title="DFS(G)"></a>DFS(G)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> each vertex u∈G.V 图G=(V,E)</div><div class="line">&#123;</div><div class="line">  u.color=WHITE</div><div class="line">  u.π=NULL	（u前驱</div><div class="line">&#125;</div><div class="line">time=0</div><div class="line"><span class="keyword">for</span> each vertex u∈G.V</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span>(u.color==WHITE)</div><div class="line">  &#123;</div><div class="line">    DFS-VISIT(G,u)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DFS-VISIT-G-u"><a href="#DFS-VISIT-G-u" class="headerlink" title="DFS-VISIT(G,u)"></a>DFS-VISIT(G,u)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">time++</div><div class="line">u.d=time (发现时间</div><div class="line">u.color=GRAY</div><div class="line"><span class="keyword">for</span> each v∈G:Adj[u]  (邻接链表</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span>(v.color==WHITE)</div><div class="line">  &#123;</div><div class="line">    v.π=u</div><div class="line">    DFS-VISIT(G,v)</div><div class="line">  &#125;</div><div class="line">&#125; </div><div class="line">u.color=BLCAK</div><div class="line">time++</div><div class="line">u.f=time (结束时间</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Depth-First-Search&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法导论笔记（四）</title>
    <link href="http://yoursite.com/2017/01/16/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2017/01/16/算法导论笔记（四）/</id>
    <published>2017-01-16T07:33:54.000Z</published>
    <updated>2017-01-20T06:35:41.435Z</updated>
    
    <content type="html"><![CDATA[<p>Queue &amp;&amp; Breadth-First-Search<br><a id="more"></a></p>
<h3 id="Queue（队列）"><a href="#Queue（队列）" class="headerlink" title="Queue（队列）"></a>Queue（队列）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Enqueue(Q,x) （进栈）</div><div class="line"><span class="keyword">if</span>(Q.head==Q.tail+1)</div><div class="line">&#123;</div><div class="line">  error <span class="string">"overflow"</span></div><div class="line">&#125;<span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">  Q.[Q.tail]=x</div><div class="line">  <span class="keyword">if</span>(Q.tail==Q.length)</div><div class="line">  &#123;</div><div class="line">    e.tail=1</div><div class="line">  &#125;<span class="keyword">else</span></div><div class="line">  Q.tail++</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Dequeue(Q) （出栈）</div><div class="line"><span class="keyword">if</span>(Q.head==Q.tail)</div><div class="line">&#123;</div><div class="line">  error <span class="string">"underflow"</span></div><div class="line">&#125;<span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">  x=Q.[Q.head]</div><div class="line">  <span class="keyword">if</span>(Q.head==Q.length)</div><div class="line">  &#123;</div><div class="line">    e.head=1</div><div class="line">  &#125;<span class="keyword">else</span></div><div class="line">  Q.head++</div><div class="line">  <span class="built_in">return</span> x</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Breadth-First-Search（广度优先）"><a href="#Breadth-First-Search（广度优先）" class="headerlink" title="Breadth-First-Search（广度优先）"></a>Breadth-First-Search（广度优先）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> each vertex u∈G.V-&#123;s&#125; 图G=(V,E)</div><div class="line">&#123;</div><div class="line">  u.color=WHITE</div><div class="line">  u.d=∞		（s至u的距离</div><div class="line">  u.π=NULL	（u前驱</div><div class="line">&#125;</div><div class="line">s.color=GRAY</div><div class="line">s.d=0</div><div class="line">s.π=NULL</div><div class="line">Q=Φ </div><div class="line">Enqueue(Q,s)</div><div class="line"><span class="keyword">while</span>(Q!=Φ )</div><div class="line">&#123;</div><div class="line">  u=Dequeue(Q)</div><div class="line">  <span class="keyword">for</span> each v∈G.Adj[u]	（邻接链表</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span>(v.color==WHITE)</div><div class="line">    &#123;</div><div class="line">      v.color=GRAY</div><div class="line">      v.d=u.d+1</div><div class="line">      v.π=u</div><div class="line">      Enqueue(Q,v)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  u.color=BLACK</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Queue &amp;amp;&amp;amp; Breadth-First-Search&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法导论笔记（三）</title>
    <link href="http://yoursite.com/2017/01/13/%E7%AE%97%E6%B3%953/"/>
    <id>http://yoursite.com/2017/01/13/算法3/</id>
    <published>2017-01-13T08:02:10.000Z</published>
    <updated>2017-01-13T08:24:30.576Z</updated>
    
    <content type="html"><![CDATA[<p>Quick-Sort &amp;&amp; Stack<br><a id="more"></a></p>
<h3 id="Quick-Sort（快速）"><a href="#Quick-Sort（快速）" class="headerlink" title="Quick-Sort（快速）"></a>Quick-Sort（快速）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">PARTITION(A,p,r)</div><div class="line">x=A[r]</div><div class="line">r=p-1</div><div class="line"><span class="keyword">for</span>(j=p; j&lt;r; j++)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span>(A[j]&lt;=x)</div><div class="line">  &#123;</div><div class="line">    i++</div><div class="line">    exchange A[i] with A[j]</div><div class="line">  &#125;	</div><div class="line">&#125; </div><div class="line">exchange A[i+1] with A[r]</div><div class="line"><span class="built_in">return</span> i+1</div></pre></td></tr></table></figure>
<h3 id="Stack（栈）"><a href="#Stack（栈）" class="headerlink" title="Stack（栈）"></a>Stack（栈）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Stack-Empty(s) (置空)</div><div class="line"><span class="keyword">if</span>(s.top==0)</div><div class="line">&#123;</div><div class="line">  <span class="built_in">return</span> True</div><div class="line">&#125;<span class="keyword">else</span> </div><div class="line"><span class="built_in">return</span> False</div><div class="line"></div><div class="line"></div><div class="line">Push(s,x) (进栈)</div><div class="line">s[s.top++]=x</div><div class="line"></div><div class="line"></div><div class="line">Pop(s) (出栈)</div><div class="line"><span class="keyword">if</span>(Stack-Empty(s))</div><div class="line">&#123;</div><div class="line">  error <span class="string">"underflow"</span></div><div class="line">&#125;<span class="keyword">else</span> </div><div class="line">s.top--</div><div class="line"><span class="built_in">return</span> s.[s.top++]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quick-Sort &amp;amp;&amp;amp; Stack&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法导论笔记（二）</title>
    <link href="http://yoursite.com/2017/01/10/%E7%AE%97%E6%B3%952/"/>
    <id>http://yoursite.com/2017/01/10/算法2/</id>
    <published>2017-01-10T09:49:28.000Z</published>
    <updated>2017-01-13T08:51:34.284Z</updated>
    
    <content type="html"><![CDATA[<p>Find-Maxing-Crossing-Subarray &amp;&amp; Min-Heapify<br><a id="more"></a></p>
<h3 id="Find-Maxing-Crossing-Subarray（最大子数组）"><a href="#Find-Maxing-Crossing-Subarray（最大子数组）" class="headerlink" title="Find-Maxing-Crossing-Subarray（最大子数组）"></a>Find-Maxing-Crossing-Subarray（最大子数组）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">A(low,mid,high)</div><div class="line">leftsum=-∞</div><div class="line">sum=0</div><div class="line"><span class="keyword">for</span>(i=mid; i&gt;low; i--)</div><div class="line">&#123;</div><div class="line">  sum=sum+A[i]</div><div class="line">  <span class="keyword">if</span>(sum&gt;leftsum)</div><div class="line">  &#123;</div><div class="line">    leftsum=sum</div><div class="line">    maxleft=i</div><div class="line">  &#125;	</div><div class="line">&#125; </div><div class="line">rightsum=-∞</div><div class="line">sum=0</div><div class="line"><span class="keyword">for</span>(j=mid+1; j&lt;high; j++)</div><div class="line">&#123;</div><div class="line">  sum=sum+A[j]</div><div class="line">  <span class="keyword">if</span>(sum&gt;rightsum)</div><div class="line">  &#123;</div><div class="line">    rightsum=sum</div><div class="line">    maxright=j</div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Min-Heapify（最小堆）"><a href="#Min-Heapify（最小堆）" class="headerlink" title="Min-Heapify（最小堆）"></a>Min-Heapify（最小堆）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">M<span class="keyword">in</span>-HEAPIFY(A,i)</div><div class="line">l=LEFT(i)</div><div class="line">r=RIGHT(i)</div><div class="line"><span class="keyword">if</span>(l&lt;=A.heapsize &amp;&amp; A[l]&lt;A[i])</div><div class="line">&#123;</div><div class="line">  smallest=l</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">  smallest=i</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(r&lt;=A.heapsize &amp;&amp; A[r]&lt;A[smallest])</div><div class="line">&#123;</div><div class="line">  smallest=r</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(smallest!=i)</div><div class="line">&#123;</div><div class="line">  exchange A[i] with A[smallest]</div><div class="line">  M<span class="keyword">in</span>-HEAPIFY(A,smallest)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Find-Maxing-Crossing-Subarray &amp;amp;&amp;amp; Min-Heapify&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法导论笔记（一）</title>
    <link href="http://yoursite.com/2017/01/08/%E7%AE%97%E6%B3%951/"/>
    <id>http://yoursite.com/2017/01/08/算法1/</id>
    <published>2017-01-08T08:20:11.000Z</published>
    <updated>2017-01-13T08:03:56.500Z</updated>
    
    <content type="html"><![CDATA[<p>Insertion-Sort &amp;&amp; Merge-Sort<br><a id="more"></a></p>
<h3 id="Insertion-Sort（插入）"><a href="#Insertion-Sort（插入）" class="headerlink" title="Insertion-Sort（插入）"></a>Insertion-Sort（插入）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">A[]=&#123;5,2,4,6,1,3&#125;</div><div class="line"><span class="keyword">for</span>(j=2; j&lt;A.length; j++)</div><div class="line">&#123;</div><div class="line">  key= A[j]</div><div class="line">  i=j-1</div><div class="line">  <span class="keyword">while</span>(i&gt;0 &amp;&amp; A[i]&gt;key)</div><div class="line">  &#123;   </div><div class="line">  	A[i+1]= A[i]</div><div class="line">      i=i-1   </div><div class="line">  &#125;</div><div class="line">  A[i+1]=key</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Merge-Sort（分治）"><a href="#Merge-Sort（分治）" class="headerlink" title="Merge-Sort（分治）"></a>Merge-Sort（分治）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">A[]=&#123;5,2,4,6,1,3&#125;</div><div class="line">q=1/2A.length</div><div class="line">n1=q,n2=A.length-q+1</div><div class="line"><span class="keyword">for</span>(i=0; i&lt;n1; i++)</div><div class="line">&#123;</div><div class="line">  L[i]=A[i];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(j=0; j&lt;n2; j++)</div><div class="line">&#123;</div><div class="line">  R[j]=A[j+q];</div><div class="line">&#125;</div><div class="line">L[n1+1]= ∞</div><div class="line">R[n1+1]= ∞ </div><div class="line">i=j=1</div><div class="line"><span class="keyword">for</span>(k=0; k&lt;A.length; k++)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span>(L[i]&lt;=R[j])</div><div class="line">  &#123;</div><div class="line">      A[k]=L[i]</div><div class="line">      i=i+1</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">      A[k]=R[j]</div><div class="line">      j=j+1</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Insertion-Sort &amp;amp;&amp;amp; Merge-Sort&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo+git部署博客</title>
    <link href="http://yoursite.com/2016/10/08/hexo-git%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/10/08/hexo-git部署博客/</id>
    <published>2016-10-08T14:13:57.000Z</published>
    <updated>2017-01-13T08:51:05.844Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一下我搭建这个博客的心得。</p>
<a id="more"></a>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>首先，我是在windows上搭建的博客(才不是没钱买mac)。<br>安装Git,Node.js具体安装百度即可。<br>安装上面两个之后就可以利用npm命令来安装hexo，执行下面这条命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo -g</div></pre></td></tr></table></figure>
<h3 id="初始化生成博客"><a href="#初始化生成博客" class="headerlink" title="初始化生成博客"></a>初始化生成博客</h3><p>初始化Hexo博客只需进入博客目录，执行下面这条命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>初始化博客之后博客目录下会产生一些配置文件和模板文件，现在就要利用这些模板文件来生成我们的静态博客文件，通过下面这条命令就可以生成我们的博客。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3><p>生成博客之后我们就可以开始在本地部署我们的博客，执行下面这条命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>现在打开浏览器访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 就可以看到我们的博客了。</p>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>通过上面这些步骤我们只是在本地搭建起了博客，要让别人看到还需要把它部署到GitHub上。<br>首先，当然是需要申请一个GitHub账号，然后新建一个Repository，接着在命名的时候需要注意，GitHubPage的名字必须用户名.github.com或者用户名.github.io。<br>创建完Repository之后，我们要配置Hexo的github地址然后才可以把我们的博客部署到GitHub上面。在博客目录底下打开_congig.yml，这就是Hexo的配置文件。找到下面这段代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$   <span class="comment"># Deployment</span></div><div class="line">    <span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line">    deploy:</div><div class="line">    <span class="built_in">type</span>:</div></pre></td></tr></table></figure>
<p>把上面的内容替换成你刚才创建的Repository地址，如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$   <span class="comment"># Deployment</span></div><div class="line">    <span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line">    deploy:</div><div class="line">    <span class="built_in">type</span>: github</div><div class="line">    repository: https://github.com/用户名/用户名.github.io.git</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
<p>创建Repository并且修改配置文件之后我们就可以把我们的博客部署到GitHub上面了，通过下面这个命令，过程中需要输入Git账号和密码:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  hexo deploy</div></pre></td></tr></table></figure>
<p>现在打开浏览器访问<a href="http://用户名.github.com" target="_blank" rel="external">http://用户名.github.com</a> 或者 <a href="http://用户名.github.io" target="_blank" rel="external">http://用户名.github.io</a> ，部署之后大约十分钟就可以看到博客效果了。</p>
<p>关于Git,具体可以看廖雪峰的<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">教程</a>。这里有一点说一下，安装完成后要配置username，usermail，注意设置完是没有任何显示的，我一开始以为是自己的问题，其实并不是。</p>
<p>一开始我是大体是照着这个<a href="http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="external">百度经验</a>搭建的。</p>
<p>安装完博客之后开始考虑优化，可以参考<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">这里</a>，只要到Hexo目录下从Git克隆代码，具体操作参照N<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">ext使用手册</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍一下我搭建这个博客的心得。&lt;/p&gt;
    
    </summary>
    
      <category term="个人博客" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/09/14/hello-world/"/>
    <id>http://yoursite.com/2016/09/14/hello-world/</id>
    <published>2016-09-14T12:23:51.018Z</published>
    <updated>2017-01-09T09:03:54.898Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
